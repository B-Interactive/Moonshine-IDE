<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 2016-present Prominic.NET, Inc.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  autoLayout="true"
		  creationComplete="onSoftwareInfoCreationComplete(event)">
	<fx:Metadata>
		[Event(name="complete", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
		import actionScripts.interfaces.ISoftwareInformationView;
		import actionScripts.ui.tabNavigator.TabNavigatorWithOrientation;

			import mx.events.FlexEvent;

			import spark.components.NavigatorContent;

			private var tabNavigator:TabNavigatorWithOrientation;
			private var sdks:SoftwareInformationSDKs;
			private var editors:SoftwareInformationEditors;
			private var versionSectionsCount:int;
			private var versionRetrievedSections:int;

			/**
			 * On creation completes
			 */
			public function onSoftwareInfoCreationComplete(event:FlexEvent):void
			{
				tabNavigator = new TabNavigatorWithOrientation();
				tabNavigator.orientation = "bottom";
				tabNavigator.percentWidth = tabNavigator.percentHeight = 100;
				this.addElement(tabNavigator);

				var navContent:NavigatorContent = new NavigatorContent();
				navContent.label = "Configured SDKs";
				sdks = new SoftwareInformationSDKs();
				sdks.addEventListener(Event.COMPLETE, onAllVersionRetrieved, false, 0, true);
				sdks.percentWidth = sdks.percentHeight = 100;
				navContent.addElement(sdks);
				tabNavigator.addElement(navContent);
				versionSectionsCount++;

				navContent = new NavigatorContent();
				navContent.label = "External Editors";
				editors = new SoftwareInformationEditors();
				editors.addEventListener(Event.COMPLETE, onAllVersionRetrieved, false, 0, true);
				editors.percentWidth = editors.percentHeight = 100;
				navContent.addElement(editors);
				tabNavigator.addElement(navContent);
				versionSectionsCount++;

				tabNavigator.selectedIndex = 0;
				tabNavigator.tabBar.setStyle("closeButtonVisible", false);

				// initiate the check task in all tabs
				for (var i:int; i < versionSectionsCount; i++)
				{
					var softwareTab:ISoftwareInformationView = (tabNavigator.getElementAt(i) as NavigatorContent).contentGroup.getElementAt(0) as ISoftwareInformationView;
					if (softwareTab) softwareTab.startCheck();
				}
			}

			public function getAllVersions():String
			{
				var details:String = sdks.getAllVersions();
				if (editors)
				{
					details += "\n\n"+ editors.getAllVersions();
				}
				return details;
			}

			public function dispose():void
			{
				sdks.dispose();
				if (editors)
					editors.dispose();
				sdks = null;
				editors = null;
			}

			private function onAllVersionRetrieved(event:Event):void
			{
				versionRetrievedSections++;
				if (versionRetrievedSections == versionSectionsCount)
				{
					dispatchEvent(event);
				}
			}

		]]>
	</fx:Script>
</s:VGroup>