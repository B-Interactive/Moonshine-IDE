<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<resizableTitleWindow:ResizableTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 width="500" minWidth="400" minHeight="100" autoLayout="true"
		 skinClass="components.skins.ResizableTitleWindowSkin" xmlns:resizableTitleWindow="actionScripts.ui.resizableTitleWindow.*" xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:view="actionScripts.plugin.findreplace.view.*"
		 creationComplete="onCreationCompletes()">
	<fx:Script>
		<![CDATA[
		import actionScripts.events.GlobalEventDispatcher;
		import actionScripts.plugin.console.ConsoleOutputEvent;
		import actionScripts.plugins.versionControl.event.VersionControlEvent;
		import actionScripts.valueObjects.ConstantsCoreVO;

		import mx.events.CloseEvent;
			import mx.validators.Validator;
			
			import actionScripts.events.GeneralEvent;
			
			public static const VALIDATE_NAME:String = "validateName";
			
			[Bindable] public var isGitAvailable:Boolean;
			public var submitObject:Object;

			private var dispatcher:GlobalEventDispatcher = GlobalEventDispatcher.getInstance();

			override protected function closeByCrossSign(event:Event):void
			{
				dispatcher.removeEventListener(VersionControlEvent.REPOSITORY_AUTH_CANCELLED, onAuthRequestCancelled);
				super.closeByCrossSign(event);
			}
			
			public function onNameValidatedByGit(localValue:String, remoteValue:String, isMultipleOrigin:Boolean, originWhereBranchFound:String=null):void
			{
				// in case of branch exists value is null
				if (!localValue && !remoteValue)
				{
					submitObject = {name:txtName.text, pushToRemote:cbPush.selected};
					dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
					return;
				}

				btnCommit.enabled = true;

				var isLocalExists:Boolean;
				var isRemoteExists:Boolean;
				if (localValue)
				{
					localValue = localValue.replace("\n", "");
					if (localValue.match(/fatal: .*/) || localValue.match(/Error: .*/) || localValue.toLowerCase().match(/was unexpected at this time/))
					{
						showError(localValue);
						//dispatcher.dispatchEvent(new ConsoleOutputEvent(ConsoleOutputEvent.CONSOLE_OUTPUT, localValue, false, false, ConsoleOutputEvent.TYPE_ERROR));
					}
					else
					{
						isLocalExists = true;
					}
				}

				if (remoteValue)
				{
					remoteValue = remoteValue.replace("\n", "");
					if (remoteValue.match(/fatal: .*/) || localValue.match(/Error: .*/) || remoteValue.toLowerCase().match(/was unexpected at this time/))
					{
						showError(remoteValue);
						//dispatcher.dispatchEvent(new ConsoleOutputEvent(ConsoleOutputEvent.CONSOLE_OUTPUT, remoteValue, false, false, ConsoleOutputEvent.TYPE_ERROR));
					}
					else
					{
						isRemoteExists = true;
					}
				}

				if (isLocalExists || isRemoteExists)
				{
					var errorMessage:String = "";
					if (isLocalExists)
					{
						errorMessage = "Local branch already exists.";
					}
					else if (isRemoteExists)
					{
						errorMessage = "Branch already exists in remote"+ (isMultipleOrigin ? ": "+ originWhereBranchFound : "") +".";
					}

					showError(errorMessage);
				}
				
				/*
				 * @local
				 */
				function showError(value:String):void
				{
					lblMess.text = value;
					hgError.includeInLayout = hgError.visible = true;
				}
			}

			private function onCreationCompletes():void
			{
				txtName.setFocus();
				dispatcher.addEventListener(VersionControlEvent.REPOSITORY_AUTH_CANCELLED, onAuthRequestCancelled, false, 0, true);
			}
			
			private function onSubmit():void
			{
				// was unexpected at this time
				// fatal:
				
				var tmpArr : Array = new Array(sValidator);
				if (Validator.validateAll(tmpArr).length == 0)
				{
					lblMess.text = "Validating..";
					hgError.includeInLayout = hgError.visible = true;

					btnCommit.enabled = false;
					dispatchEvent(new GeneralEvent(VALIDATE_NAME, txtName.text));
				}
			}

			private function onAuthRequestCancelled(event:VersionControlEvent):void
			{
				btnCommit.enabled = true;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:StringValidator id="sValidator" source="{txtName}" property="text" trigger="{btnCommit}" triggerEvent="click"/>
	</fx:Declarations>
	
	<s:VGroup height="100%" width="100%" 
			  paddingLeft="12" paddingBottom="3" paddingTop="9" paddingRight="13">
		<view:PromptTextInput id="txtName"
							  width="100%" styleName="textInput"
							  prompt="New Branch Name" enter="onSubmit()"
							  restrict="a-zA-Z0-9`!@#$%()_+={}';.\-\/\&amp;"/>
		<s:CheckBox id="cbPush"
					label="Push newly created branch to remote"/>
		<s:HGroup width="100%" verticalAlign="middle" horizontalAlign="center"
				  visible="{!isGitAvailable}" includeInLayout="{!isGitAvailable}">
			<s:Image source="@Embed('/elements/images/iconExclamationRed.png')"/>
			<s:Label text="You need Git installed on your system to continue."/>
		</s:HGroup>
		<s:HGroup id="hgError"
				  width="100%" verticalAlign="middle" horizontalAlign="center"
				  visible="false" includeInLayout="false">
			<s:Image source="@Embed('/elements/images/iconExclamationRed.png')"/>
			<s:Label id="lblMess"
					 maxDisplayedLines="3"/>
		</s:HGroup>
	</s:VGroup>
	
	<resizableTitleWindow:controlBarContent>
		<s:Button id="btnCommit" label="Create Branch"
				  styleName="darkButton" click="onSubmit()"/>
	</resizableTitleWindow:controlBarContent>
</resizableTitleWindow:ResizableTitleWindow>