<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 Prominic.NET, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// Author: Prominic.NET, Inc.
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
////////////////////////////////////////////////////////////////////////////////
-->
<resizableTitleWindow:ResizableTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
										   xmlns:s="library://ns.adobe.com/flex/spark"
										   xmlns:resizableTitleWindow="actionScripts.ui.resizableTitleWindow.*"
										   xmlns:view="actionScripts.plugin.findreplace.view.*"
										   xmlns:controls="components.controls.*"
										   backgroundColor="0xf5f5f5" title="Convert Domino Database"
										   width="600" minWidth="400" autoLayout="true"
										   skinClass="components.skins.ResizableTitleWindowSkin"
										   creationComplete="onCreationCompletes(event)">
	<fx:Script>
		<![CDATA[
			import actionScripts.controllers.DataAgent;
			import actionScripts.events.FileUploaderEvent;
			import actionScripts.events.SettingsEvent;
			import actionScripts.plugin.console.ConsoleOutputEvent;
			import actionScripts.plugins.vagrant.VagrantPlugin;
			import actionScripts.plugins.vagrant.vo.VagrantInstanceVO;
			import actionScripts.utils.FileDownloader;
			import actionScripts.utils.FileDownloader;
			import actionScripts.utils.FileUploader;

			import mx.collections.ArrayCollection;

			import mx.events.FlexEvent;

			import actionScripts.events.GlobalEventDispatcher;

			import spark.components.BusyIndicator;

			public static const EVENT_ADD_UPDATE_INSTANCE:String = "eventAddUpdateVagrantInstance";
			private static const CONVERSION_TEST_INTERVAL:int = 5000; // 5 seconds

			public var instances:ArrayCollection;

			[Bindable] private var nsfConverterInstances:ArrayCollection;

			private var dispatcher:GlobalEventDispatcher = GlobalEventDispatcher.getInstance();
			private var loader:DataAgent;
			private var fileUploader:FileUploader;
			private var uploadedNSFFilePath:String;
			private var uploadedNSFFileSize:Number;
			private var conversioTestTimeout:uint;
			private var retryCount:int;
			private var busyIndicator:BusyIndicator;
			private var isProcessCanceled:Boolean;
			
			protected function onCreationCompletes(event:FlexEvent):void
			{
				fileUploader = new FileUploader();
				fileUploader.isSingleUpload = true;
				fileUploader.uploadField = "file";
				fileUploader.addEventListener(FileUploaderEvent.EVENT_UPLOAD_LOADED, onFilesLoaded, false, 0, true);
				fileUploader.addEventListener(FileUploaderEvent.EVENT_UPLOAD_COMPLETE_DATA, onFileUploadedData, false, 0, true);
				fileUploader.addEventListener(FileUploaderEvent.EVENT_UPLOAD_ERROR, onFileUploadError, false, 0, true);

				if (instances)
				{
					nsfConverterInstances = new ArrayCollection();
					for each (var instance:VagrantInstanceVO in instances)
					{
						if (instance.capabilities && (instance.capabilities.indexOf("nsfconverter") != -1))
						{
							nsfConverterInstances.addItem(instance);
						}
					}
				}
			}

			private function onConfigure():void
			{
				dispatcher.dispatchEvent(new SettingsEvent(SettingsEvent.EVENT_OPEN_SETTINGS, VagrantPlugin.NAMESPACE));
			}

			private function onNSFBrowse():void
			{
				fileUploader.addFiles([new FileFilter('Database .nsf File', '*.nsf')]);
			}

			private function onFilesLoaded(event:FileUploaderEvent):void
			{
				txtFile.text = event.value as String;
			}

			private function onFileUploadedData(event:FileUploaderEvent):void
			{
				if (event.value && ((event.value as String) != ""))
				{
					var serverReturn:Object = JSON.parse(event.value as String);
					if (serverReturn)
					{
						if ("error" in serverReturn)
						{
							disableBusyUI();
							dispatcher.dispatchEvent(
									new ConsoleOutputEvent(
											ConsoleOutputEvent.CONSOLE_PRINT,
											"Failed to upload file with exit code:"+ serverReturn.error +"\n"+ serverReturn.message,
											false, false, ConsoleOutputEvent.TYPE_ERROR
									)
							);
						}
						else
						{
							uploadedNSFFilePath = serverReturn.path;
							uploadedNSFFileSize = Number(serverReturn.size);

							dispatcher.dispatchEvent(
									new ConsoleOutputEvent(
											ConsoleOutputEvent.CONSOLE_PRINT,
											"Requesting conversion job to: "+ (ddlInstances.selectedItem as VagrantInstanceVO).url +"/task"
									)
							);
							runConversionCommandOnServer();
						}
					}
				}
			}

			private function onFileUploadError(event:FileUploaderEvent):void
			{
				disableBusyUI();
				dispatcher.dispatchEvent(
						new ConsoleOutputEvent(
								ConsoleOutputEvent.CONSOLE_PRINT,
								"Failed to upload file on server:\n"+ (event.value as String),
								false, false, ConsoleOutputEvent.TYPE_ERROR
						)
				);
			}

			private function onSubmit():void
			{
				enableBusyUI();
				retryCount = 0;
				isProcessCanceled = false;
				dispatcher.dispatchEvent(
						new ConsoleOutputEvent(
								ConsoleOutputEvent.CONSOLE_PRINT,
								".nsf file starts uploading to: "+ (ddlInstances.selectedItem as VagrantInstanceVO).url +"/file/upload",
								true
						)
				);

				fileUploader.uploadUrl = (ddlInstances.selectedItem as VagrantInstanceVO).url +"/file/upload";
				fileUploader.startUpload();

				//dispatchEvent(new Event(EVENT_ADD_UPDATE_INSTANCE));
				//closeThis();
			}

			private function runConversionCommandOnServer(withId:String=null):void
			{
				clearInterval(conversioTestTimeout);
				loader = new DataAgent(
						(ddlInstances.selectedItem as VagrantInstanceVO).url +"/task"+ (withId ? "/"+ withId : ""),
						onConversionRunResponseLoaded,
						onConversionRunFault,
						withId ? null : {command: "/bin/bash /opt/nsf-converter-portal/scripts/nsf-odp-convert.sh '"+ uploadedNSFFilePath +"' 'result.zip'"},
						withId ? DataAgent.GETEVENT : DataAgent.POSTEVENT
				);
			}

			private function onConversionRunResponseLoaded(value:Object, message:String=null):void
			{
				if (isProcessCanceled)
					return;

				var infoObject:Object = JSON.parse(value as String);
				loader = null;

				if (infoObject)
				{
					if ("error" in infoObject)
					{
						disableBusyUI();
						dispatcher.dispatchEvent(
								new ConsoleOutputEvent(
										ConsoleOutputEvent.CONSOLE_PRINT,
										"Conversion failed with exit code:"+ infoObject.error +"\n"+ infoObject.message,
										false, false, ConsoleOutputEvent.TYPE_ERROR
								)
						);
					}
					else
					{
						if ("taskStatus" in infoObject)
						{

							switch ((infoObject.taskStatus as String).toLowerCase())
							{
								case "executing":
									dispatcher.dispatchEvent(
											new ConsoleOutputEvent(
													ConsoleOutputEvent.CONSOLE_PRINT,
													"Re-try conversion check: "+ (++retryCount)
											)
									);
									conversioTestTimeout = setTimeout(
											runConversionCommandOnServer,
											CONVERSION_TEST_INTERVAL,
											infoObject.id
									);
									break;
								case "completed":
										if (infoObject.exitStatus != "0" && ("errorMessage" in infoObject))
										{
											disableBusyUI();
											dispatcher.dispatchEvent(
													new ConsoleOutputEvent(
															ConsoleOutputEvent.CONSOLE_PRINT,
															"Conversion failed with exit code: "+ infoObject.exitStatus +"\n"+ infoObject.errorMessage,
															false, false, ConsoleOutputEvent.TYPE_ERROR
													)
											);
										}
										else
										{
											dispatcher.dispatchEvent(
													new ConsoleOutputEvent(
															ConsoleOutputEvent.CONSOLE_PRINT,
															"Checking conversion project from: "+ (ddlInstances.selectedItem as VagrantInstanceVO).url + infoObject.workingDir
													)
											);

											var downloader:FileDownloader = new FileDownloader(
													(ddlInstances.selectedItem as VagrantInstanceVO).url +"/file/download?path="+ infoObject.workingDir +"/result.zip", File.desktopDirectory.resolvePath("result.zip")
											);
											configureListenerOnFileDownloader(downloader, true);
											downloader.load();
										}
									break;
								default:
									trace(">>>>>> ", infoObject.taskStatus);
									break;
							}
						}
					}
				}
			}

			private function configureListenerOnFileDownloader(downloader:FileDownloader, listen:Boolean):void
			{
				if (listen)
				{
					downloader.addEventListener(FileDownloader.EVENT_FILE_DOWNLOADED, onFileDownloadedOrFailed, false, 0, true);
				}
				else
				{
					downloader.removeEventListener(FileDownloader.EVENT_FILE_DOWNLOADED, onFileDownloadedOrFailed);
				}
			}

			private function onConversionRunFault(message:String):void
			{
				loader = null;
				dispatcher.dispatchEvent(
						new ConsoleOutputEvent(
								ConsoleOutputEvent.CONSOLE_PRINT,
								"Conversion request failed: "+ message,
								false, false, ConsoleOutputEvent.TYPE_ERROR
						)
				);
			}

			private function onFileDownloadedOrFailed(event:Event):void
			{
				disableBusyUI();
				configureListenerOnFileDownloader(event.target as FileDownloader, false);
			}

			private function enableBusyUI():void
			{
				btnBrowse.enabled = false;
				btnSubmit.enabled = false;
				ddlInstances.enabled = false;
				addRemoveBusyIndicator();
			}

			private function disableBusyUI():void
			{
				btnBrowse.enabled = true;
				btnSubmit.enabled = true;
				ddlInstances.enabled = true;
				addRemoveBusyIndicator();
			}

			private function addRemoveBusyIndicator():void
			{
				if (!busyIndicator)
				{
					busyIndicator = new BusyIndicator();
					grpBusyIndicator.addElement(busyIndicator);
				}
				else
				{
					grpBusyIndicator.removeElement(busyIndicator);
					busyIndicator = null;
				}
			}

			private function onCancel():void
			{
				isProcessCanceled = true;
				if (busyIndicator) disableBusyUI();
			}

		]]>
	</fx:Script>

	<resizableTitleWindow:layout>
		<s:VerticalLayout paddingLeft="12" paddingBottom="12" paddingTop="9" paddingRight="12"/>
	</resizableTitleWindow:layout>

	<s:Label text="Select a Database (*.nsf):"/>
	<s:HGroup width="100%" verticalAlign="middle">
		<view:PromptTextInput id="txtFile"
							  width="100%" styleName="textInput" prompt="Select path.." editable="false"/>
		<s:Button id="btnBrowse"
				  label="Browse" click="onNSFBrowse()" styleName="darkButton"/>
	</s:HGroup>

	<s:Label text="%Requirement Notes to Come here%" paddingTop="6" paddingBottom="10"/>

	<s:Label text="NSF Converter:"/>
	<s:HGroup width="100%" verticalAlign="middle">
		<s:DropDownList id="ddlInstances"
						width="100%" height="26"
						dataProvider="{nsfConverterInstances}" labelField="title" requireSelection="true"/>
		<s:Button label="Configure" styleName="darkButton"
				  click="onConfigure()"/>
	</s:HGroup>

	<resizableTitleWindow:controlBarContent>
		<s:VGroup id="grpBusyIndicator"
			percentHeight="100" autoLayout="true" verticalAlign="middle"/>
		<s:Spacer width="100%"/>
		<s:Button id="btnSubmit"
				  label="Submit" styleName="darkButton"
					click="onSubmit()"/>
		<s:Button id="btnCancel"
				  label="Cancel" styleName="darkButton"
				  click="onCancel()"/>
	</resizableTitleWindow:controlBarContent>
</resizableTitleWindow:ResizableTitleWindow>