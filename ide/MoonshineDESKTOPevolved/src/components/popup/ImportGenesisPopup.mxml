<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 Prominic.NET, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// Author: Prominic.NET, Inc.
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
////////////////////////////////////////////////////////////////////////////////
-->
<resizableTitleWindow:ResizableTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009"
										   xmlns:s="library://ns.adobe.com/flex/spark"
										   xmlns:mx="library://ns.adobe.com/flex/mx"
										   xmlns:resizableTitleWindow="actionScripts.ui.resizableTitleWindow.*"
										   xmlns:view="actionScripts.plugin.findreplace.view.*"
										   backgroundColor="0xf5f5f5" title="Import from Genesis Directory Catalog"
										   width="600" minWidth="400" autoLayout="true"
										   skinClass="components.skins.ResizableTitleWindowSkin"
										   creationComplete="onCreationCompletes()">
	<fx:Script>
		<![CDATA[
		import actionScripts.controllers.DataAgent;
		import actionScripts.locator.IDEModel;
		import actionScripts.plugins.genesis.GenesisPlugin;
		import actionScripts.valueObjects.ConstantsCoreVO;

		import mx.utils.StringUtil;

		import mx.validators.Validator;

		import spark.components.Alert;
		import spark.components.BusyIndicator;
		import spark.utils.TextFlowUtil;

		public static const EVENT_FORM_SUBMIT:String = "eventFormSubmitted";

		private var _url:String;
		[Bindable]
		public function get url():String
		{
			return _url;
		}
		public function set url(value:String):void
		{
			_url = value;
		}

		private var _destinationFolder:File;
		public function get destinationFolder():File
		{
			return _destinationFolder;
		}

		private var busyIndicator:BusyIndicator;
		private var loader:DataAgent;
		private var isLocalURICall:Boolean;

		private function onCreationCompletes():void
		{
			lblFileLabel.textFlow = TextFlowUtil.importFromString(
					"<p>Genesis Directory Catalog URI (<a href='https://genesis.directory/apps'>https://genesis.directory/apps</a>):</p>"
			);
		}

		private function loadURIdata():void
		{
			addRemoveBusyIndicator();
			releaseUI(false);
			loader = new DataAgent(
					url,
					onQueryDataLoaded,
					onQueryDataFault,
					null, DataAgent.GETEVENT, 0, false
			);
		}

		protected function onQueryDataLoaded(value:Object, message:String=null):void
		{
			addRemoveBusyIndicator();
			releaseUI(true);

			var infoObject:Object = JSON.parse(value as String);
			loader = null;

			if ("app" in infoObject)
			{
				if ("downloadurl" in infoObject.app)
				{
					if (infoObject.app.downloadurl)
					{
						txtFile.text = url = infoObject.app.downloadurl;
						if (isLocalURICall)
						{
							onSubmit();
						}
						return;
					}
				}

				hgError.includeInLayout = hgError.visible = true;
				lblError.text = "Project download is not currently available for this application.";
			}
			else
			{
				hgError.includeInLayout = hgError.visible = true;
				lblError.text = "Not a valid application at: "+ url;
			}
		}

		protected function onQueryDataFault(message:String):void
		{
			addRemoveBusyIndicator();
			releaseUI(true);

			hgError.includeInLayout = hgError.visible = true;
			lblError.text = message;
		}

		private function addRemoveBusyIndicator():void
		{
			if (!busyIndicator)
			{
				vgProgress.includeInLayout = vgProgress.visible = true;
				busyIndicator = new BusyIndicator();
				vgProgress.addElementAt(busyIndicator, 0);
			}
			else
			{
				vgProgress.removeElement(busyIndicator);
				busyIndicator = null;
				vgProgress.includeInLayout = vgProgress.visible = false;
			}
		}

		private function onDownloadDirBrowse():void
		{
			IDEModel.getInstance().fileCore.browseForDirectory("Select Download Folder", onDownloadDirBrowsed);
		}

		private function onDownloadDirBrowsed(location:File):void
		{
			_destinationFolder = location;
			txtDownloadDir.text = location.nativePath;
		}

		private function onSubmit():void
		{
			hgError.includeInLayout = hgError.visible = false;

			// validations
			var tmpArr:Array = new Array(svPath, svDownloadDir);
			if (Validator.validateAll(tmpArr).length != 0)
			{
				return;
			}

			var urlTest:RegExp = /(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&:\/~\+#]*[\w\-\@?^=%&\/~\+#])?/g;
			if (txtFile.text.toLowerCase().indexOf("://project/") != -1)
			{
				// if an user enters something like 'moonshine://project/$applicationID`
				parseURLfromURI();
				return;
			}
			else if (!urlTest.exec(txtFile.text))
			{
				hgError.includeInLayout = hgError.visible = true;
				lblError.text = "Invalid URL/URI format.";
				return;
			}

			url = txtFile.text;
			dispatchEvent(new Event(EVENT_FORM_SUBMIT));
			closeThis();
		}

		private function parseURLfromURI():void
		{
			var valueString:String = txtFile.text.substr(
					txtFile.text.indexOf("://") + 3,
					txtFile.text.length
			);
			var arguments:Array = valueString.split("/");
			if ((arguments.length > 1) && (arguments[0].toLowerCase() == "project"))
			{
				var applicationID:String = decodeURIComponent(StringUtil.trim(arguments[1]));
				if (applicationID)
				{
					url = GenesisPlugin.GENESIS_ID_QUERY_URL + applicationID;
					isLocalURICall = true;
					loadURIdata();
					return;
				}
			}

			hgError.includeInLayout = hgError.visible = true;
			lblError.text = "Unknown URI format";
		}

		private function releaseUI(value:Boolean):void
		{
			txtFile.enabled = value;
			btnSubmit.enabled = value;
			btnBrowseDestination.enabled = value;
		}

		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:StringValidator id="svPath" source="{txtFile}" property="text" trigger="{btnSubmit}"/>
		<mx:StringValidator id="svDownloadDir" source="{txtDownloadDir}" property="text" trigger="{btnSubmit}"/>
	</fx:Declarations>

	<resizableTitleWindow:layout>
		<s:VerticalLayout paddingLeft="12" paddingBottom="12" paddingTop="9" paddingRight="12"/>
	</resizableTitleWindow:layout>

	<s:RichEditableText id="lblFileLabel"
						width="100%"
						editable="false" focusEnabled="false"
						fontSize="13"/>
	<view:PromptTextInput id="txtFile"
						  width="100%" styleName="textInput" text="@{url}"
						  prompt="{ConstantsCoreVO.IS_DEVELOPMENT_MODE ? 'moonshinedevelopment://project/id' : 'moonshine://project/id'}"
						  creationComplete="{(event.target).setFocus()}"/>

	<s:Label text="Select Destination Parent Directory:"/>
	<s:HGroup width="100%" verticalAlign="middle">
		<view:PromptTextInput id="txtDownloadDir"
							  width="100%" styleName="textInput" prompt="Select path.." editable="false"/>
		<s:Button id="btnBrowseDestination"
				  label="Browse" click="onDownloadDirBrowse()" styleName="darkButton"/>
	</s:HGroup>

	<s:HGroup id="vgProgress"
			  width="100%"
			  horizontalAlign="center" verticalAlign="middle"
			  includeInLayout="false" visible="false">
		<s:Label text="Querying from {url}"
				 styleName="smallText"/>
	</s:HGroup>

	<s:HGroup id="hgError"
			  width="100%" verticalAlign="middle" horizontalAlign="center"
			  visible="false" includeInLayout="false">
		<s:Image source="@Embed('/elements/images/iconExclamationRed.png')"/>
		<s:Label id="lblError"/>
	</s:HGroup>

	<resizableTitleWindow:controlBarContent>
		<s:Spacer width="100%"/>
		<s:Button id="btnSubmit"
				  label="Submit" styleName="darkButton"
				  click="onSubmit()"/>
	</resizableTitleWindow:controlBarContent>
</resizableTitleWindow:ResizableTitleWindow>