<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 2016-present Prominic.NET, Inc.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
			   implements="actionScripts.ui.IContentWindow"
			   creationComplete="initThis()">
	<fx:Script>
		<![CDATA[
			import flash.utils.clearTimeout;
			import flash.utils.setTimeout;
			
			import actionScripts.events.GlobalEventDispatcher;
			import actionScripts.events.ProjectEvent;
			import actionScripts.factory.NativeMenuItemLocation;
			import actionScripts.locator.IDEModel;
			import actionScripts.ui.IContentWindow;
			import actionScripts.ui.menu.MenuBar;
			import actionScripts.ui.menu.interfaces.ICustomMenu;
			import actionScripts.ui.menu.vo.CustomMenu;
			import actionScripts.ui.menu.vo.CustomMenuItem;
			import actionScripts.ui.menu.vo.MenuItem;
			import actionScripts.ui.tabview.CloseTabEvent;
			
			import awaybuilder.controller.events.SaveDocumentEvent;
			import awaybuilder.controller.events.SceneReadyEvent;
			
			public var currentFile:File;
			
			private var dispatcher:GlobalEventDispatcher = GlobalEventDispatcher.getInstance();
			private var model:IDEModel = IDEModel.getInstance();
			private var abLib:AwayBuilderLibMain;
			
			private var _isChanged:Boolean;
			
			/**
			 * Interface methods
			 */
			public function get longLabel():String
			{
				return "Away Builder";
			}
			
			public function get label():String
			{
				return _isChanged ? "*Away Builder" : "Away Builder";
			}
			
			public function isChanged():Boolean
			{
				return _isChanged;
			}
			
			public function isEmpty():Boolean
			{
				return false;
			}
			
			public function save():void
			{
				abLib.save();
			}
			
			/**
			 * On creation completes
			 */
			public function initThis():void
			{
				dispatcher.addEventListener(ProjectEvent.REMOVE_PROJECT, handleRemoveProject, false, 0, true);
				
				//dispatcher.addEventListener(CloseTabEvent.EVENT_CLOSE_TAB, onThisClosing, false, 0, true);
				model.mainView.bodyPanel.setStyle('backgroundAlpha', 0);
				model.mainView.mainPanel.setStyle('backgroundAlpha', 0);
				model.mainView.mainContent.setStyle('backgroundAlpha', 0);
				
				var tmp:SplashScreenLib = SplashScreenLib.instance;
				tmp.attachSplashScreenTo(new Rectangle(stage.nativeWindow.x, stage.nativeWindow.y, stage.nativeWindow.width, stage.nativeWindow.height));
				
				var timeoutValue:uint = setTimeout(function():void
				{
					abLib = new AwayBuilderLibMain;
					abLib.percentWidth = abLib.percentHeight = 100;
					abLib.addEventListener(SceneReadyEvent.READY, onAwayBuilderReady, false, 0, true);
					abLib.addEventListener(Event.CHANGE, onAwayBuilderChanged, false, 0, true);
					abLib.addEventListener(SaveDocumentEvent.SAVE_DOCUMENT_SUCCESS, onAwayBuilderSaved, false, 0, true);
					addElement(abLib);
					
					var currentMenu:Object = applyNewNativeMenu(abLib.menuProvider);
					
					var menuBar:MenuBar = new MenuBar();
					menuBar.menu = currentMenu as ICustomMenu;
					menuBar.percentWidth = 100;
					abLib.menu = menuBar;
					abLib.eventDispatcher = GlobalEventDispatcher.getInstance();
					
					clearTimeout(timeoutValue);
				}, 1000);
			}
			
			public function loadAwayBuilderFile():void
			{
				if (currentFile) abLib.openFileByURL(currentFile.url, currentFile.name);
			}
			
			private function onAwayBuilderChanged(event:Event):void
			{
				_isChanged = true;
				dispatchEvent(new Event("labelChanged"));
			}
			
			private function onAwayBuilderSaved(event:Event):void
			{
				_isChanged = false;
				dispatchEvent(new Event("labelChanged"));
			}
			
			private function applyNewNativeMenu(menuItems:Array):Object
			{
				var mainMenu:Object = new CustomMenu();
				addMenus(menuItems, mainMenu);
				
				return mainMenu;
			}
			
			private function onAwayBuilderReady(event:Event):void
			{
				abLib.removeEventListener(SceneReadyEvent.READY, onAwayBuilderReady);
				loadAwayBuilderFile();
				
				this.dispatchEvent(new Event(Event.COMPLETE));
			}
			
			private function onThisClosing(event:CloseTabEvent):void
			{
				if (event.tab == this)
				{
					// time to remove all footprints
					abLib.removeEventListener(SceneReadyEvent.READY, onAwayBuilderReady);
					abLib.removeEventListener(Event.CHANGE, onAwayBuilderChanged);
					abLib.removeEventListener(SaveDocumentEvent.SAVE_DOCUMENT_SUCCESS, onAwayBuilderSaved);
					dispatcher.removeEventListener(CloseTabEvent.EVENT_CLOSE_TAB, onThisClosing);
					abLib.dispatchEvent(new Event(AwayBuilderLibMain.DISPOSE));
					abLib.eventDispatcher = null;
					removeElement(abLib);
					abLib = null;
					//model.mainView.bodyPanel.setStyle('backgroundAlpha', 1);
					//model.mainView.mainPanel.setStyle('backgroundAlpha', 1);
					//model.mainView.mainContent.setStyle('backgroundAlpha', 1);
				}
			}
			
			protected function addMenus(items:Array, parentMenu:*):void
			{
				for (var i:int = 0; i < items.length; i++)
				{
					var item:Object = items[i];
					if (item && item.children)
					{
						var newMenu:*;
						newMenu = new CustomMenu();
						if (!newMenu)
							continue;
						addMenus(item.children, newMenu);
						parentMenu.addSubmenu(newMenu, item.label);
					}
					else if (item)
					{
						var menuItem:* = createNewMenuItem((item.type != "separator") ? item : new MenuItem(null));
						if (menuItem)
							parentMenu.addItem((menuItem is NativeMenuItemLocation) ? NativeMenuItemLocation(menuItem).item.getNativeMenuItem : menuItem);
					}
				}
			}
			
			private function createNewMenuItem(item:Object):*
			{
				var menuItem:CustomMenuItem;
				
				menuItem = new CustomMenuItem(item.label, item.isSeparator);
				if (item.label)
				{
					menuItem.data = {
						eventData:item,
						event:"awayBuilderMenuEvent"
					};
				}
				
				return menuItem;
			}
			
			private function handleRemoveProject(event:ProjectEvent):void
			{
				// in case of close project lets init editor with blank document
				abLib.openNewDocument(false);
				onAwayBuilderSaved(null);
			}
			
		]]>
	</fx:Script>
</s:Group>