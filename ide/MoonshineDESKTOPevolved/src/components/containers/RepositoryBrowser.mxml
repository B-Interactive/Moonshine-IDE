<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark"
		  xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:utils="actionScripts.utils.*" xmlns:ui="actionScripts.ui.*"
		  gap="10"
		  creationComplete="onCreationCompletes(event)">
	<fx:Script>
		<![CDATA[
		import actionScripts.utils.UtilsCore;

		import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.events.FlexEvent;
			import mx.events.TreeEvent;
			
			import actionScripts.events.GlobalEventDispatcher;
			import actionScripts.events.TreeMenuItemEvent;
			import actionScripts.plugins.versionControl.VersionControlUtils;
			import actionScripts.plugins.versionControl.event.VersionControlEvent;
			import actionScripts.ui.renderers.RepositoryTreeItemRenderer;
			import actionScripts.valueObjects.RepositoryItemVO;
			import actionScripts.valueObjects.VersionControlTypes;
			
			[Bindable] public var selectedItem:Object;
			[Bindable] private var repositories:ArrayCollection;
			
			private var dispatcher:GlobalEventDispatcher = GlobalEventDispatcher.getInstance();
			private var remoteReuestedObject:RepositoryItemVO;
			
			//--------------------------------------------------------------------------
			//
			//  PUBLIC API
			//
			//--------------------------------------------------------------------------
			
			public function setRepositories(value:ArrayCollection):void
			{
				repositories = new ArrayCollection();

				var isNonCompliantItem:Boolean;
				var isGitAvailable:Boolean = UtilsCore.isGitPresent();
				var isSVNAvailable:Boolean = UtilsCore.isSVNPresent();
				for each (var repository:RepositoryItemVO in value)
				{
					if ((repository.type == VersionControlTypes.GIT && isGitAvailable) ||
							(repository.type == VersionControlTypes.SVN && isSVNAvailable) ||
							(repository.type != VersionControlTypes.SVN && repository.type != VersionControlTypes.GIT))
					{
						repositories.addItem(repository);
					}
					else
					{
						isNonCompliantItem = true;
					}
				}

				var tmpArray:Array = [];
				if (!isGitAvailable) tmpArray.push("Git");
				if (!isSVNAvailable) tmpArray.push("Subversion");
				if (isNonCompliantItem)
				{
					lblError.visible = lblError.includeInLayout = true;
					lblError.text = tmpArray.join(" and ") +" are unavailable. Unable to Browse the related repositories.";
				}

				if (!repositories.sort)
				{
					repositories.sort = new Sort([new SortField("type"), new SortField("url")]);
					repositories.refresh();
				}

				treeRepositories.callLater(expandItems);
			}
			
			public function onBackEvent():void
			{
				repositories = null;
				lblError.visible = lblError.includeInLayout = false;
				if (remoteReuestedObject) 
				{
					remoteReuestedObject.isUpdating = false;
					remoteReuestedObject = null;
				}
			}
			
			//--------------------------------------------------------------------------
			//
			//  PRIVATE/PROTECTED API
			//
			//--------------------------------------------------------------------------
			
			protected function onCreationCompletes(event:FlexEvent):void
			{
				treeRepositories.addEventListener(TreeMenuItemEvent.RIGHT_CLICK_ITEM_SELECTED, handleContextMenuItemClick, false, 0, true);
			}
			
			private function handleContextMenuItemClick(event:TreeMenuItemEvent):void
			{
				var rendererData:RepositoryItemVO = event.extra;
				if (rendererData.isUpdating) return;
				
				switch (event.menuLabel)
				{
					case RepositoryTreeItemRenderer.REFRESH:
						// remove any previous items first
						rendererData.children = [];
						if (rendererData.type == VersionControlTypes.SVN) 
						{
							requestRemoteSvnList(rendererData);
						}
						else
						{
							updateGitList(rendererData);
						}
						break;
					case RepositoryTreeItemRenderer.COLLAPSE_ALL:
						collapseAllItems();
						break;
				}
			}
			
			private function repositoryLabelFunction(item:RepositoryItemVO):String
			{
				if (item.type == VersionControlTypes.SVN)
				{
					if (item.isRoot) return item.url;
					else if (item.isDownloadable) return item.label +" ("+ item.url +")";
					return item.label;
				}
				
				if (item.label) return item.label +" ("+ item.url +")";
				return item.url;
			}
			
			private function expandItems():void
			{
				for each (var item:Object in repositories)
				{
					if (item.type != VersionControlTypes.SVN)
					{
						treeRepositories.expandItem(item, true);
					}
				}
			}
			
			private function collapseAllItems():void
			{
				for each (var item:Object in repositories)
				{
					treeRepositories.expandChildrenOf(item, false);
				}
			}
			
			//--------------------------------------------------------------------------
			//
			//  DATA-FETCH UI API
			//
			//--------------------------------------------------------------------------
			
			protected function onTreeItemOpen(event:TreeEvent):void
			{
				if (remoteReuestedObject)
				{
					treeRepositories.expandItem(event.item, false);
					return;
				}

				requestRemoteSvnList(event.item as RepositoryItemVO);
			}
			
			protected function requestRemoteSvnList(repoItem:RepositoryItemVO):void
			{
				// condition1:: if no children, request data
				// condition2:: if has children from previous load, do not request
				if (repoItem.children && (repoItem.children.length == 0))
				{
					remoteReuestedObject = repoItem;
					repoItem.isUpdating = true;
					dispatcher.dispatchEvent(new VersionControlEvent(VersionControlEvent.LOAD_REMOTE_SVN_LIST,
						{repository: repoItem, onCompletion: onCallListingCompleted}));
				}
			}
			
			protected function updateGitList(repoItem:RepositoryItemVO):void
			{
				repoItem.isUpdating = true;
				VersionControlUtils.updateDependentRepositories(repoItem);
				repoItem.isUpdating = false;
			}
			
			private function onCallListingCompleted(againstNodeItem:RepositoryItemVO, success:Boolean):void
			{
				againstNodeItem.isUpdating = false;
				remoteReuestedObject = null;
				
				// in case of auth cancel situation
				if (!success)
				{
					treeRepositories.expandItem(againstNodeItem, false);
					return;
				}
				
				var lastScrollPosition:Number = treeRepositories.verticalScrollPosition;
				var lastSelectedItem:Object = treeRepositories.selectedItem;
				var openItems:Object = treeRepositories.openItems;
				treeRepositories.openItems = openItems;
				treeRepositories.invalidateList();
				
				treeRepositories.callLater(function():void
				{
					treeRepositories.verticalScrollPosition = lastScrollPosition;
					treeRepositories.selectedItem = lastSelectedItem;
					if (!treeRepositories.isItemOpen(againstNodeItem))
					{
						treeRepositories.expandItem(againstNodeItem, true);
					}
				});
			}
			
			private function getTreeTooltip(item:Object):String
			{
				if (item.notes) return item.notes;
				return null;
			}
		]]>
	</fx:Script>
	
	<s:Label text="Select any repository to checkout/clone:"/>
	
	<ui:AutoSortChildrenTree id="treeRepositories"
			 width="100%" height="100%"
			 labelFunction="repositoryLabelFunction"
			 itemRenderer="actionScripts.ui.renderers.RepositoryTreeItemRenderer"
			 dataProvider="{repositories}"
			 rollOverColor="0xe4e4e4"
			 selectionColor="0xCCCCCC"
			 color="0x000"
			 sortItemLabel="label"
			 showDataTips="true"
			 dataTipFunction="getTreeTooltip"
			 alternatingItemColors="[0xEEEEEE,0xFFFFFF]"
			 itemOpen="onTreeItemOpen(event)"
			 itemClick="selectedItem = treeRepositories.selectedItem"/>

	<s:Label id="lblError"
			 width="100%" textAlign="center" color="0xff0000"
			 includeInLayout="false" visible="false"/>
</s:VGroup>