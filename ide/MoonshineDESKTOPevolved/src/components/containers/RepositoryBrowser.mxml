<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:utils="actionScripts.utils.*"
		  gap="10"
		  creationComplete="onCreationCompletes(event)">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.Sort;
			import mx.collections.SortField;
			import mx.events.FlexEvent;
			import mx.events.TreeEvent;
			
			import actionScripts.events.GlobalEventDispatcher;
			import actionScripts.events.TreeMenuItemEvent;
			import actionScripts.plugins.versionControl.event.VersionControlEvent;
			import actionScripts.ui.renderers.RepositoryTreeItemRenderer;
			import actionScripts.valueObjects.RepositoryItemVO;
			import actionScripts.valueObjects.VersionControlTypes;
			
			[Bindable] public var selectedItem:Object;
			[Bindable] private var repositories:ArrayCollection;
			
			private var dispatcher:GlobalEventDispatcher = GlobalEventDispatcher.getInstance();
			private var remoteReuestedObject:RepositoryItemVO;
			
			//--------------------------------------------------------------------------
			//
			//  PUBLIC API
			//
			//--------------------------------------------------------------------------
			
			public function setRepositories(value:Array):void
			{
				repositories = new ArrayCollection(value);
				repositories.sort = new Sort([new SortField("type"), new SortField("url")]);
				repositories.refresh();
			}
			
			public function onBackEvent():void
			{
				if (remoteReuestedObject) 
				{
					remoteReuestedObject.isUpdating = false;
					remoteReuestedObject = null;
				}
			}
			
			//--------------------------------------------------------------------------
			//
			//  PRIVATE/PROTECTED API
			//
			//--------------------------------------------------------------------------
			
			protected function onCreationCompletes(event:FlexEvent):void
			{
				treeRepositories.addEventListener(TreeMenuItemEvent.RIGHT_CLICK_ITEM_SELECTED, handleContextMenuItemClick, false, 0, true);
			}
			
			private function handleContextMenuItemClick(event:TreeMenuItemEvent):void
			{
				var rendererData:RepositoryItemVO = event.extra;
				if (rendererData.isUpdating) return;
				
				switch (event.menuLabel)
				{
					case RepositoryTreeItemRenderer.REFRESH:
						// remove any previous items first
						rendererData.children = [];
						requestRemoteSvnList(rendererData);
						break;
					case RepositoryTreeItemRenderer.COLLAPSE_ALL:
						collapseAllItems();
						break;
				}
			}
			
			private function repositoryLabelFunction(item:RepositoryItemVO):String
			{
				if (item.type == VersionControlTypes.SVN)
				{
					if (item.isRoot) return item.url;
					return item.label;
				}
				
				if (item.label) return item.label +" ("+ item.url +")";
				return item.url;
			}
			
			private function collapseAllItems():void
			{
				for each (var item:Object in repositories)
				{
					treeRepositories.expandChildrenOf(item, false);
				}
			}
			
			//--------------------------------------------------------------------------
			//
			//  DATA-FETCH UI API
			//
			//--------------------------------------------------------------------------
			
			protected function onTreeItemOpen(event:TreeEvent):void
			{
				if (remoteReuestedObject)
				{
					treeRepositories.expandItem(event.item, false);
					return;
				}
				
				requestRemoteSvnList(event.item as RepositoryItemVO);
			}
			
			protected function requestRemoteSvnList(repoItem:RepositoryItemVO):void
			{
				// condition1:: if no children, request data
				// condition2:: if has children from previous load, do not request
				if (repoItem.children && (repoItem.children.length == 0))
				{
					remoteReuestedObject = repoItem;
					repoItem.isUpdating = true;
					dispatcher.dispatchEvent(new VersionControlEvent(VersionControlEvent.LOAD_REMOTE_SVN_LIST,
						{repository: repoItem, onCompletion: onCallListingCompleted}));
				}
			}
			
			private function onCallListingCompleted(againstNodeItem:RepositoryItemVO, success:Boolean):void
			{
				againstNodeItem.isUpdating = false;
				remoteReuestedObject = null;
				
				// in case of auth cancel situation
				if (!success)
				{
					treeRepositories.expandItem(againstNodeItem, false);
					return;
				}
				
				var lastScrollPosition:Number = treeRepositories.verticalScrollPosition;
				var lastSelectedItem:Object = treeRepositories.selectedItem;
				var openItems:Object = treeRepositories.openItems;
				treeRepositories.openItems = openItems;
				treeRepositories.invalidateList();
				
				treeRepositories.callLater(function():void
				{
					treeRepositories.verticalScrollPosition = lastScrollPosition;
					treeRepositories.selectedItem = lastSelectedItem;
					if (!treeRepositories.isItemOpen(againstNodeItem))
					{
						treeRepositories.expandItem(againstNodeItem, true);
					}
				});
			}
			
		]]>
	</fx:Script>
	
	<s:Label text="Select any repository to checkout/clone:"/>
	
	<mx:Tree id="treeRepositories" 
			 width="100%" height="100%"
			 labelFunction="repositoryLabelFunction"
			 itemRenderer="actionScripts.ui.renderers.RepositoryTreeItemRenderer"
			 dataProvider="{repositories}"
			 rollOverColor="0xe4e4e4"
			 selectionColor="0xCCCCCC"
			 color="0x000"
			 alternatingItemColors="[0xEEEEEE,0xFFFFFF]"
			 itemOpen="onTreeItemOpen(event)"
			 itemClick="selectedItem = treeRepositories.selectedItem"/>
</s:VGroup>