<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 Prominic.NET, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// Author: Prominic.NET, Inc.
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
////////////////////////////////////////////////////////////////////////////////
-->
<mx:VBox xmlns:fx="http://ns.adobe.com/mxml/2009" 
    xmlns:mx="library://ns.adobe.com/flex/mx" 
    xmlns:s="library://ns.adobe.com/flex/spark"  
	xmlns:sidebar="actionScripts.ui.sidebar.*"
	implements="actionScripts.ui.IPanelWindow"
	width="100%"
	height="100%" 
	backgroundColor="0x444444"
	verticalGap="0"
	creationComplete="handleCreationComplete(event)">

	<sidebar:SidebarViewHeader
		id="header"
		label="Outline" 
		width="100%"
		creationComplete="initHeader()" />
	
	<mx:Tree id="outlineTree"
		dataProvider="{outline}"
		labelField="label"
			
		color="0xe0e0e0"
		contentBackgroundColor="0x0"
		textRollOverColor="0xe0e0e0"
		rollOverColor="0x393939"
		textSelectedColor="0xe0e0e0"
		selectionColor="0x393939"
		alternatingItemColors="[0x444444, 0x4d4c4c]"
		verticalScrollBarStyleName="black"
		fontSize="12"
			
		borderVisible="false"
		rowHeight="18"
		useRollOver="true"
		doubleClickEnabled="true"

		iconFunction="{getItemIcon}"
			
		width="100%" height="100%" 
		showRoot="false"
		borderStyle="none"
		itemClick="onTreeItemClick(event)"/>

	<fx:Script>
		<![CDATA[
			import actionScripts.ui.tabview.TabViewTab;
			import actionScripts.ui.LayoutModifier;
			import mx.events.ListEvent;
			import mx.collections.ArrayCollection;
			import actionScripts.valueObjects.SymbolInformation;
			import actionScripts.valueObjects.DocumentSymbol;
			import actionScripts.valueObjects.SymbolKind;
			import actionScripts.valueObjects.CompletionItemKind;
			import mx.events.CollectionEvent;
			import flash.events.Event;
			import mx.events.CollectionEventKind;

			[Bindable]
			public var outline:ArrayCollection = new ArrayCollection();

			public function get selectedSymbol():Object
			{
				return this.outlineTree.selectedItem.symbol;
			}

			private function initHeader():void
			{
				header.addEventListener(TabViewTab.EVENT_TAB_CLOSE, handleClose);
			}

			private function handleCreationComplete(event:Event):void
			{
				outline.addEventListener(CollectionEvent.COLLECTION_CHANGE, handleCollectionChange);
			}

			private function handleCollectionChange(event:CollectionEvent):void
			{
				if(event.kind == CollectionEventKind.ADD && event.location == 0)
				{
					this.outlineTree.expandItem(event.items[0], true);
				}
			}

			private function getItemLabel(item:Object):String
			{
				if(item is SymbolInformation)
				{
					var symbolInfo:SymbolInformation = SymbolInformation(item);
					return symbolInfo.name;
				}
				else if(item is DocumentSymbol)
				{
					var docSymbol:DocumentSymbol = DocumentSymbol(item);
					return docSymbol.name;
				}
				return null;
			}

			private function getItemIcon(item:Object):Class
			{
				return null;
			}
			
			private function handleClose(event:Event):void
			{
				if (stage) 
				{
					LayoutModifier.removeFromSidebar(this);
				}
			}
			
			protected function onTreeItemClick(event:ListEvent):void
			{
				this.dispatchEvent(new Event(Event.CHANGE));
			}

		]]>
	</fx:Script>
</mx:VBox>