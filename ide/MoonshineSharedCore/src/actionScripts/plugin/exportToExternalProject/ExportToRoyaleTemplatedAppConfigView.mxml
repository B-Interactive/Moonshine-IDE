<?xml version="1.0"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<settings:SettingsView xmlns:fx="http://ns.adobe.com/mxml/2009"
                       xmlns:settings="actionScripts.plugin.settings.*">
    <fx:Script><![CDATA[
        import actionScripts.plugin.settings.vo.AbstractSetting;
        import actionScripts.plugin.settings.vo.ISetting;
        import actionScripts.plugin.settings.vo.PathSetting;
        import actionScripts.plugin.settings.vo.SettingsWrapper;

        import spark.components.BusyIndicator;
        import spark.components.Label;
        import spark.components.VGroup;
        import spark.layouts.HorizontalAlign;
        import spark.layouts.VerticalAlign;

        private var _doNotShowPromptAgain:Boolean;

        public function get doNotShowPromptAgain():Boolean
        {
            return _doNotShowPromptAgain;
        }

        public function set doNotShowPromptAgain(value:Boolean):void
        {
            _doNotShowPromptAgain = value;
        }

        override public function save():void
        {
            var settingsWrappers:Vector.<SettingsWrapper> = getSettingsForAllCategories();
            var requiredSetting:ISetting = null;

            for each (var wrapper:SettingsWrapper in settingsWrappers)
            {
                var settings:Vector.<ISetting> = wrapper.getSettingsList();
                for each (var setting:ISetting in settings)
                {
                    var settingValue:String = setting.stringValue;
                    if(!settingValue)
                    {
                        requiredSetting = setting;
                        break;
                    }
                }

                if(requiredSetting)
                {
                    break;
                }
            }

            if(requiredSetting && requiredSetting is PathSetting)
            {
                requiredSetting.renderer["setMessage"]("This field is required to generate report", AbstractSetting.MESSAGE_CRITICAL);
                (requiredSetting as AbstractSetting).addEventListener(AbstractSetting.PATH_SELECTED, onRequiredSettingPathSelect);
            }
            else
            {
                showBusyIndicator();
                super.save();
            }
        }

        private function onRequiredSettingPathSelect(event:Event):void
        {
            event.target.renderer["setMessage"](null, AbstractSetting.MESSAGE_CRITICAL);
            event.target.removeEventListener(AbstractSetting.PATH_SELECTED, onRequiredSettingPathSelect);
        }

        private function showBusyIndicator():void
        {
            var busyContainer:VGroup = new VGroup();
            busyContainer.verticalAlign = VerticalAlign.MIDDLE;
            busyContainer.horizontalAlign = HorizontalAlign.CENTER;

            busyContainer.horizontalCenter = 0;
            busyContainer.verticalCenter = 0;

            var busyIndicator:BusyIndicator = new BusyIndicator();
            busyIndicator.setStyle("symbolColor", "0x444444");
            busyIndicator.width = busyIndicator.height = 30;
            var lbl:Label = new Label();
            lbl.setStyle("color", "#e252d3");
            lbl.setStyle("fontWeight", "bold");
            lbl.setStyle("fontSize", 16);
            lbl.text = "Exporting project is in progress...";

            busyContainer.addElement(busyIndicator);
            busyContainer.addElement(lbl);

            settingsContainer.addElement(busyContainer);
        }
        ]]></fx:Script>
</settings:SettingsView>
