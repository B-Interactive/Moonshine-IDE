<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
// 
////////////////////////////////////////////////////////////////////////////////
-->
<mx:Canvas xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:ui="actionScripts.ui.*"
	xmlns:utils="actionScripts.utils.*"
	
	xmlns:view="actionScripts.plugin.console.view.*"
	xmlns:collapsiblehdivider="components.collapsibleHDivider.*" 
	width="100%" 
	height="25"
	minHeight="25"
	
	backgroundColor="0x373737"
	backgroundAlpha="1" percentHeight="100"
	clipContent="false" updateComplete="consoleView_updateCompleteHandler(event)"
	creationComplete="onComplete()" 
	
    label="Objects"
	implements="actionScripts.interfaces.IViewWithTitle"
	>
	<fx:Script>
		<![CDATA[
		import flash.text.engine.ElementFormat;
		import flash.text.engine.FontDescription;
		import flash.text.engine.FontLookup;

		import mx.events.FlexEvent;
		import mx.managers.CursorManager;
		import mx.managers.CursorManagerPriority;

		import spark.components.RichEditableText;
		import mx.events.ListEvent;

		import actionScripts.locator.IDEModel;
		import actionScripts.plugin.console.ConsoleCommandEvent;
		import actionScripts.plugin.console.ConsoleStyle;
		import spark.events.IndexChangeEvent;
		import mx.collections.ArrayCollection;
		import mx.core.ClassFactory;
		import mx.collections.ArrayList;
		import mx.collections.ArrayCollection;
		import mx.collections.HierarchicalData;
		

		import mx.controls.listClasses.IListItemRenderer;

		import view.domino.forms.imageClass.LoadImage;

		import actionScripts.plugins.ui.editor.VisualEditorViewer;
		import mx.controls.Alert;

		import view.domino.surfaceComponents.components.DominoGlobalsObjects;
		import view.domino.viewEditor.object.DominoObjectsProperty;
		import flash.utils.Dictionary;
		import mx.events.TreeEvent;

		private var editor:VisualEditorViewer = null;

		private var editxml:XML = null;

		private var dominoGlobalsObjects:DominoGlobalsObjects

		private var optionsMap:Dictionary
		private var formOptionsMap:Dictionary; 

		 

		[Bindable] public var showCommandLine:Boolean = true;

		public var displayContextMenuAbout:Boolean = true;
		public var displayContextMenuHide:Boolean = true;
		public var displayContextMenuHelp:Boolean = true;
		public var displayContextMenuExit:Boolean = true;

		private var _consolePopOver:Boolean;
		[Bindable]
		private var historyContainerHeight:int = 0;
		private var cm:ContextMenu;
		protected var model:IDEModel = IDEModel.getInstance();
		[Bindable]
		private var dataProviderList:ArrayCollection=new ArrayCollection();

		private var codeFormulaArray:Array = [
			{key: 'globalsOptions', value: ""},
			{key: 'globalsDeclarations', value: ""},
			{key: 'globalsInitialize', value: ""},
			{key: 'globalsTeminate', value: ""},
			{key: 'jsHeader', value: ""},
			{key: 'onHelp', value: ""},
			{key: 'onLoad', value: ""},
			{key: 'onUnload', value: ""},
			{key: 'options', value: ""},
			{key: 'declarations', value: ""},
			{key: 'queryopen', value: ""},
			{key: 'postopen', value: ""},
			{key: 'querymodechange', value: ""},
			{key: 'postmodechange', value: ""},
			{key: 'queryrecalc', value: ""},
			{key: 'postrecalc', value: ""},
			{key: 'querySave', value: ""},
			{key: 'postsave', value: ""},
			{key: 'querysend', value: ""},
			{key: 'postsend', value: ""},
			{key: 'querysend', value: ""},
			{key: 'queryclose', value: ""},
			{key: 'qnsize', value: ""},
			{key: 'initialize', value: ""},
			{key: 'terminate', value: ""}

    	]

	
		public var formulaRunWayList:ArrayCollection = new ArrayCollection(
			[{label:"Client", value:"client"},
			{label:"Web", value:"web"} ]);


		public var formulaClientRunLanguage:ArrayCollection = new ArrayCollection(
			[{label:"Formula", value:"formula"},
			{label:"LotusScript", value:"lotusscript"},
			{label:"JavaScript", value:"javascript"} ]);

		public var formulaWebRunLanguage:ArrayCollection = new ArrayCollection(
			[{label:"JavaScript", value:"javascript"},
			{label:"Common JavaScript", value:"commonjavascript"} ]);

		private function updateSelection(e:IndexChangeEvent):void
		{
			if(runList.selectedItem.label=="Client"){
				runWayList.dataProvider=formulaClientRunLanguage;
			}else{
				runWayList.dataProvider=formulaWebRunLanguage;
			}
		}

		private function updateSelectionWay(e:IndexChangeEvent):void
		{
		
		}

		


			
				
		

		public function get title():String
		{
			return this.label;
		}

		public function get consolePopOver():Boolean
		{
			return _consolePopOver;
		}

		public function set consolePopOver(value:Boolean):void
		{
			_consolePopOver = value;

			if (!historyContainer) return;

			//divider.y = -1;

			if (value)
			{
				height = minHeight;
				historyContainer.setStyle('top', null);
				historyContainer.setStyle('bottom', null);
				//historyContainer.y = divider.y;
			}
			else
			{
				historyContainer.setStyle('top', 0);
				historyContainer.setStyle('bottom', 0);
			}

		}

		private function onComplete():void
		{
			runLabel.setStyle("color","#ffffff");
			consolePopOver = _consolePopOver;
			cm = new ContextMenu();
			var clear:ContextMenuItem = new ContextMenuItem('Clear', false, true, true);
			clear.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, clearHandler);
			cm.customItems.push(clear);
			cm.clipboardMenu = true;
			//history.contextMenu = cm;
			//(history.textDisplay as RichEditableText).contextMenu = cm;

			if (displayContextMenuAbout)
			{
				var about:ContextMenuItem = new ContextMenuItem('About', false, true, true);
				about.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, aboutHandler);
				cm.customItems.push(about);
			}
			if (displayContextMenuHide)
			{
				var hide:ContextMenuItem = new ContextMenuItem('Hide', false, true, true);
				hide.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, hideHandler);
				cm.customItems.push(hide);
			}
			if (displayContextMenuExit)
			{
				var exit:ContextMenuItem = new ContextMenuItem('Exit', false, true, true);
				exit.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, exitHandler);
				cm.customItems.push(exit);
			}
			if (displayContextMenuHelp)
			{
				var help:ContextMenuItem = new ContextMenuItem('Help', false, true, true);
				help.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, helpHandler);
				cm.customItems.push(help);
			}

			editor= model.activeEditor as VisualEditorViewer;
			//inital the all object to the array
			if(editor&&editor.text){
				//first load it to xml
				editxml=new XML(editor.text);
				optionsMap = new Dictionary();
				dominoGlobalsObjects=new DominoGlobalsObjects();
				if(!editxml.MainApplication.dominoGlobalsObject){
					
				}
				optionsMap=initalOptionsWithLoadingXML(editxml,optionsMap)

			}
			//expend defaul options
			expandNodesWithChildren(treeData);
			// for each(var treeNode:XML in myTree.dataProvider..node){
			// 	if(treeNode.@type=="LotusScript"){
			// 		treeNode.@icon=
			// 	}
			// }
			//myTree.itemRenderer=actionScripts.ui.renderers.DominoObjectsTreeItemRenderer;
		}


		private function initalOptionsWithLoadingXML(loadXml:XML,opMap:Dictionary):Dictionary
		{
			// if(loadXml.dominoGlobalsObject){
			// 	if(loadXml.dominoGlobalsObject.@initialize){
					
			// 	}
			// }
			opMap["globalsInitialize"]=loadXml.dominoGlobalsObject.@initialize;
			opMap["globalsOptions"]=loadXml.dominoGlobalsObject.@options;
			opMap["globalsDeclarations"]=loadXml.dominoGlobalsObject.@declarations;
			opMap["globalsTeminate"]=loadXml.dominoGlobalsObject.@terminate;

			if(!opMap["globalsInitialize"] || opMap["globalsInitialize"]==""){
				opMap["globalsInitialize"]="Open Public"
			}

			if(!opMap["globalsOptions"] || opMap["globalsOptions"]==""){
				opMap["globalsOptions"]="Option Public"
			}

			if(!opMap["globalsDeclarations"] || opMap["globalsDeclarations"]==""){
				opMap["globalsDeclarations"]="Declarations Public"
			}

			if(!opMap["globalsTeminate"] || opMap["globalsTeminate"]==""){
				opMap["globalsTeminate"]="Sub Teminate"
			}	

			opMap["jsHeader"]=loadXml.dominoFormsObject.@jsHeader;
			opMap["onHelp"]=loadXml.dominoFormsObject.@jsHeader;
			opMap["onLoad"]=loadXml.dominoFormsObject.@jsHeader;
			opMap["onUnload"]=loadXml.dominoFormsObject.@jsHeader;
			opMap["options"]=loadXml.dominoFormsObject.@jsHeader;
			opMap["declarations"]=loadXml.dominoFormsObject.@jsHeader;
			opMap["queryopen"]=loadXml.dominoFormsObject.@jsHeader;
			opMap["postopen"]=loadXml.dominoFormsObject.@jsHeader;
			opMap["querymodechange"]=loadXml.dominoFormsObject.@jsHeader;
			opMap["postmodechange"]=loadXml.dominoFormsObject.@jsHeader;
			opMap["queryrecalc"]=loadXml.dominoFormsObject.@jsHeader;
			opMap["postrecalc"]=loadXml.dominoFormsObject.@jsHeader;
			opMap["querySave"]=loadXml.dominoFormsObject.@jsHeader;
			opMap["postsave"]=loadXml.dominoFormsObject.@jsHeader;
			opMap["querysend"]=loadXml.dominoFormsObject.@jsHeader;
			opMap["postsend"]=loadXml.dominoFormsObject.@jsHeader;
			opMap["querysend"]=loadXml.dominoFormsObject.@jsHeader;
			opMap["queryclose"]=loadXml.dominoFormsObject.@jsHeader;
			opMap["qnsize"]=loadXml.dominoFormsObject.@jsHeader;
			opMap["initialize"]=loadXml.dominoFormsObject.@jsHeader;
			opMap["terminate"]=loadXml.dominoFormsObject.@jsHeader;
			
			return opMap;
		}

		private var cursorID:int = CursorManager.NO_CURSOR;

		[Embed(source="Assets.swf", symbol="mx.skins.cursor.VBoxDivider")]
		private var cursor:Class;

		private function mouseOverDivider():void
		{
			cursorID = cursorManager.setCursor(cursor, CursorManagerPriority.HIGH, 0, 0);
		}

		private function mouseOutDivider():void
		{
			if (cursorID != CursorManager.NO_CURSOR)
			{
				cursorManager.removeCursor(cursorID);
				cursorID = CursorManager.NO_CURSOR;
			}
		}

		private function mouseUpDivider(event:Event = null):void
		{
			parent.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveDivider);
			stage.removeEventListener(MouseEvent.MOUSE_UP, mouseUpDivider);
		}

		private function mouseMoveDivider(event:MouseEvent):void
		{
			historyContainerHeight = parent.height - parent.mouseY - minHeight;
		}

		private function clearHandler(e:Event):void
		{
			//commandLine.dispatchEvent(new ConsoleCommandEvent("clear", null));
		}

		private function aboutHandler(e:Event):void
		{
			//commandLine.dispatchEvent(new ConsoleCommandEvent("about", null));
		}

		private function hideHandler(e:Event):void
		{
			//commandLine.dispatchEvent(new ConsoleCommandEvent("hide", null));
		}

		private function exitHandler(e:Event):void
		{
			//commandLine.dispatchEvent(new ConsoleCommandEvent("exit", null));
		}

		private function helpHandler(e:Event):void
		{
			//commandLine.dispatchEvent(new ConsoleCommandEvent("help", null));
		}

		protected function consoleView_updateCompleteHandler(event:FlexEvent):void
		{
			// TODO Auto-generated method stub
			if (!_consolePopOver)
				historyContainerHeight = this.height;
		}

		protected function onTreeItemClicked(event:ListEvent):void
		{
			
		}
		function expandNodesWithChildren(currentItems:XMLList):void {
			for each (var node:XML in currentItems) {

				if (node.children().length() > 0) {
					myTree.expandItem(node, true);
					expandNodesWithChildren(node.children());
				}

				if(node.@key=="globalsOptions"){
					myTree.selectedItem = node;
					initalDefaultValueForDropList();
				}
			}
		}

		// Find the node by key and expand its parent nodes
		function expandNodeByAttributeKey(attributeKey:String, currentItems:XMLList):void {
			for each (var node:XML in currentItems) {
				myTree.expandItem(node, true);
				if (node.@key == attributeKey) {
					// Node found, expand its parent nodes
					myTree.selectedItem=node;
					return;
				}

				// If the node has children, recursively search in them
				if (node.children().length() > 0) {
					expandNodeByAttributeKey( node.children(),node.children());
				}
			}
		}

		

		[Bindable]
		public var selectedNode:XML;

		// Event handler for the Tree control change event.
		public function treeChanged(event:Event):void {
			selectedNode=Tree(event.target).selectedItem as XML;
			if(selectedNode.@key&&selectedNode.@key.toString().indexOf("globals")>=0){
				initalDefaultValueForDropList();

				textInput.text=optionsMap[selectedNode.@key]
			}
		}

		private function initalDefaultValueForDropList():void 
		{
			var selectindex:int=getSelectedIndex("Client",runList.dataProvider as ArrayCollection);
			if(selectindex!=-1){
				runList.selectedIndex=selectindex;
				runList.enabled = false;
			}
			var selectindex2:int=getSelectedIndex("LotusScript",runWayList.dataProvider as ArrayCollection);
			if(selectindex2!=-1){
				runWayList.selectedIndex=selectindex2;
				runWayList.enabled = false;
			}
		}

		public function getOptionsMap():Dictionary
		{
			return this.optionsMap;
		}

		private function textInput_changeHandler(event:Event):void
        {
            if(event.target){
				if(event.target.hasOwnProperty("text")){
					editor.dispatchEvent(new Event('labelChanged'));
					if(selectedNode&&selectedNode.@key)
					{
						optionsMap[selectedNode.@key]=event.target.text;
					}
				}
			}
            
        }

		private function tree_iconFunc(item:Object):Class
		{
			var iconClass:Class;
			var renderer:IListItemRenderer = myTree.itemToItemRenderer(item);
			switch (XML(item).@type.toString())
			{
				case "LotusScript":
					iconClass = LoadImage.DOMINO_OBJECT_TREE_PAGE;
					break;
				case "Formula":
					iconClass = LoadImage.DOMINO_OBJECT_TREE_RHOMBUS;
					break;
				case "JavaScript":
					iconClass = LoadImage.DOMINO_OBJECT_TREE_CIRCLE;
					break;
			}

			return iconClass;
		}


		private function getSelectedIndex(label:String,list:ArrayCollection):int {
			
			for (var i:int = 0; i < list.length; i++) {
				if (list[i].label == label) {
					return i;
				}
			}
			return -1; // Return -1 if the label is not found
		}


		
		]]>
	</fx:Script>
	 <fx:Declarations>
        <fx:XMLList id="treeData">
            <node label="(Globals)Email Reply Common Sub" type="">
               
				<node label="(Options)" type="LotusScript" key="globalsOptions"/>
				<node label="(Declarations)" type="LotusScript" key="globalsDeclarations"/>
				<node label="Initialize" type="LotusScript" key="globalsInitialize"/>
				<node label="Teminate" type="LotusScript" key="globalsTeminate"/>
                
            </node>
			<node label="Email Reply Common Subform(Sub)" type="" key="">
				<node label="Window Title" type="Formula" key="windowTitle"/>
				<node label="HTML Head Conten" type="Formula" key="htmlHeadConten"/>
				<node label="HTML Body Attributes" type="Formula" key="htmlBodyAttributes"/>
				<node label="WebQueryOpen" type="Formula" key="webQueryOpen"/>
				<node label="WebQuerySave" type="Formula" key="webQuerySave"/>
				<node label="Target Frame" type="Formula" key="targetFrame"/>
				<node label="JS Header" type="JavaScript" key="jsHeader"/>
				<node label="onHelp" type="JavaScript" key="onHelp"/>
				<node label="onLoad" type="JavaScript" key="onLoad"/>
				<node label="onUnload" type="JavaScript" key="onUnload"/>
				<node label="onClick" type="JavaScript" key="onClick"/>
				<node label="onDbClick" type="JavaScript" key="onDbClick"/>
				<node label="onKeyDown" type="JavaScript" key="onKeyDown"/>
				<node label="onKeyPress" type="JavaScript" key="onKeyPress"/>
				<node label="onKeyUp" type="JavaScript" key="onKeyUp"/>
				<node label="onMouseDown" type="JavaScript" key="onMouseDown"/>
				<node label="onMouseMove" type="JavaScript" key="onMouseMove"/>
				<node label="onMouseOut" type="JavaScript" key="onMouseOut"/>
				<node label="onMouseOver" type="JavaScript" key="onMouseOver"/>
				<node label="onMouseUp" type="JavaScript" key="onMouseUp"/>
				<node label="onRest" type="JavaScript" key="onRest"/>
				<node label="onSubmit" type="JavaScript" key="onSubmit"/>
				<node label="(Options)" type="LotusScript" key="options"/>
				<node label="(Declarations)" type="LotusScript" key="declarations"/>
				<node label="Queryopen" type="LotusScript" key="queryopen"/>
				<node label="Postopen" type="LotusScript" key="postopen"/>
				<node label="Querymodechange" type="LotusScript" key="querymodechange"/>
				<node label="Postmodechange" type="LotusScript" key="postmodechange"/>
				<node label="Queryrecalc" type="LotusScript" key="queryrecalc"/>
				<node label="Postrecalc" type="LotusScript" key="postrecalc"/>
				<node label="QuerySave" type="LotusScript" key="querySave"/>
				<node label="Postsave" type="LotusScript" key="postsave"/>
				<node label="Querysend" type="LotusScript" key="querysend"/>
				<node label="Postsend" type="LotusScript" key="postsend"/>
				<node label="Queryclose" type="LotusScript" key="queryclose"/>
				<node label="Onsize" type="LotusScript" key="onsize"/>
				<node label="Initialize" type="LotusScript" key="initialize"/>
				<node label="Terminate" type="LotusScript" key="terminate"/>
            </node>
        </fx:XMLList>
    </fx:Declarations>

	<collapsiblehdivider:CollapsibleEdgeContainersHDividerGroup percentWidth="100" bottom="0" id="historyContainer" top="0" gap="0" minWidth="250">
		<mx:VBox percentHeight="100"
			 percentWidth="30"
			 backgroundAlpha="0.9"
			 backgroundColor="0x373737">
			   <mx:Tree id="myTree" width="100%" 
			    color="0xEEEEEE"
				contentBackgroundColor="0x0"
				rollOverColor="0x393939"
				selectionColor="0xc165b8"
				alternatingItemColors="[0x444444, 0x4d4c4c]"
			   height="100%" labelField="@label"
                showRoot="false" dataProvider="{treeData}" change="treeChanged(event)"
				itemRenderer="actionScripts.ui.renderers.DominoTreeItemRenderer"
			 
				/>

				
			 </mx:VBox>
			 <!-- iconFunction="tree_iconFunc" -->
			
		<s:Scroller percentWidth="70" percentHeight="100">
			<s:VGroup horizontalAlign="left" verticalAlign="middle" percentWidth="100" percentHeight="100">
				<s:HGroup verticalAlign="bottom" left="10" percentWidth="100">
					<s:Label text="Run" id="runLabel" fontWeight="bold" percentWidth="10" />
            		<s:DropDownList id="runList"  percentWidth="40"
						 dataProvider="{formulaRunWayList}"
						labelField="label" 
						change="updateSelection(event);"/>
					<s:DropDownList id="runWayList" 
						percentWidth="40" dataProvider="{formulaClientRunLanguage}"
						labelField="label" 
						change="updateSelectionWay(event);"/>	
       		 	</s:HGroup>
					
				<s:TextArea id="textInput"  height="100%"
						text="" width="100%" minWidth="156" editable="true" selectable="true"
						prompt=""
						
						styleName="fixedWidthTexts"
						textInput="textInput_changeHandler(event)"
						
						change="textInput_changeHandler(event)"
				/>
					
			</s:VGroup>
		</s:Scroller>

	</collapsiblehdivider:CollapsibleEdgeContainersHDividerGroup>
	
  
</mx:Canvas>