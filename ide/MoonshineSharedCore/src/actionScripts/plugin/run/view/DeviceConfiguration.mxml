<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<resizableTitleWindow:ResizableTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
										   xmlns:s="library://ns.adobe.com/flex/spark" 
										   xmlns:resizableTitleWindow="actionScripts.ui.resizableTitleWindow.*"
										   width="600" height="240" minWidth="300" minHeight="150"
										   skinClass="components.skins.ResizableTitleWindowSkin"
										   title="Device Configurations"
										   initialize="onInitialized(event)">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import actionScripts.events.GeneralEvent;
			import actionScripts.events.ProjectEvent;
			import actionScripts.valueObjects.ConstantsCoreVO;
			import actionScripts.valueObjects.MobileDeviceVO;
			
			import components.popup.DeviceDefinePopup;
			
			[Bindable] public var devices:ArrayCollection;
			
			private var deviceDefinePop:DeviceDefinePopup;
			
			protected function onDeviceAddition(event:MouseEvent, isNew:Boolean):void
			{
				if (!deviceDefinePop)
				{
					deviceDefinePop = PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, DeviceDefinePopup, true) as DeviceDefinePopup;
					deviceDefinePop.addEventListener(CloseEvent.CLOSE, onDefinePopupClosed);
					deviceDefinePop.addEventListener(GeneralEvent.DONE, onDeviceUpdated);
					if (!isNew) deviceDefinePop.editedDevice = dgDevices.selectedItem as MobileDeviceVO;
					PopUpManager.centerPopUp(deviceDefinePop);
				}
				else
				{
					PopUpManager.bringToFront(deviceDefinePop);
				}
			}
			
			protected function onDeviceDeletion(event:MouseEvent):void
			{
				if (dgDevices.selectedItem.type == MobileDeviceVO.AND) ConstantsCoreVO.TEMPLATES_ANDROID_DEVICES.removeItem(dgDevices.selectedItem);
				else ConstantsCoreVO.TEMPLATES_IOS_DEVICES.removeItem(dgDevices.selectedItem);
				devices.removeItem(dgDevices.selectedItem);
				dispatchEvent(new Event(Event.CHANGE));
			}
			
			private function onDefinePopupClosed(event:CloseEvent):void
			{
				deviceDefinePop.removeEventListener(CloseEvent.CLOSE, onDefinePopupClosed);
				deviceDefinePop.removeEventListener(ProjectEvent.FLEX_SDK_UDPATED, onDeviceUpdated);
				deviceDefinePop = null;
				
				System.gc();
			}
			
			private function onDeviceUpdated(event:GeneralEvent):void
			{
				onDefinePopupClosed(null);
				
				if (devices.getItemIndex(event.value) == -1)
				{
					devices.addItem(event.value);
					if (event.value.type == MobileDeviceVO.AND) ConstantsCoreVO.TEMPLATES_ANDROID_DEVICES.addItem(event.value);
					else ConstantsCoreVO.TEMPLATES_IOS_DEVICES.addItem(event.value);
				}
				else
					devices.refresh();
				
				dispatchEvent(new Event(Event.CHANGE));
			}
			
			protected function onInitialized(event:FlexEvent):void
			{
				devices = new ArrayCollection();
				devices.addAll(ConstantsCoreVO.TEMPLATES_ANDROID_DEVICES);
				devices.addAll(ConstantsCoreVO.TEMPLATES_IOS_DEVICES);
			}
			
		]]>
	</fx:Script>
	
	<s:DataGrid id="dgDevices" 
				dataProvider="{devices}"
				width="100%" height="100%"
				sortableColumns="false" borderVisible="false"
				contentBackgroundColor="0xe0e0e0" selectionColor="0xf6f6f6"
				rowHeight="28" horizontalScrollPolicy="off" doubleClickEnabled="true"
				doubleClick="onDeviceAddition(event, false)">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn headerText="Name" dataField="name" width="200" minWidth="200"/>
				<s:GridColumn headerText="Key" dataField="key" width="200"/>
				<s:GridColumn headerText="Scale DPI" dataField="dpi" width="100"/>
				<s:GridColumn headerText="" dataField="type" minWidth="100"/>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	
	<resizableTitleWindow:controlBarContent>
		<s:Button label="+" styleName="darkButton"
				  click="onDeviceAddition(event, true)"/>
		<s:Button label="-" styleName="darkButton"
				  enabled="{dgDevices.selectedItem &amp;&amp; !dgDevices.selectedItem.isDefault}"
				  click="onDeviceDeletion(event)"/>
		<s:Button label="Edit" styleName="darkButton"
				  enabled="{dgDevices.selectedItem}" 
				  click="onDeviceAddition(event, false)"/>
	</resizableTitleWindow:controlBarContent>
</resizableTitleWindow:ResizableTitleWindow>