<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:VGroup 
	xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:mx="library://ns.adobe.com/flex/mx"
	width="100%"
	paddingLeft="15"
	paddingTop="15"
	paddingRight="15"
	paddingBottom="15"
	creationComplete="onProjectDirectoryPathRendererCreationComplete(event)">
	<fx:Script>
		<![CDATA[
		import actionScripts.plugin.settings.vo.ProjectDirectoryPathSetting;

		import mx.collections.ArrayCollection;
		import mx.events.FlexEvent;
		import mx.utils.ObjectUtil;

		import actionScripts.locator.IDEModel;
		import actionScripts.plugin.settings.vo.AbstractSetting;

		[Bindable]
		public var setting:ProjectDirectoryPathSetting;
		[Bindable]
		public var historyPaths:ArrayCollection;

		[Bindable]
		private var model:IDEModel = IDEModel.getInstance();

		private var message:String;
		private var messageType:String;

		public function setMessage(value:String, type:String):void
		{
			this.message = value;
			this.messageType = type;

			if (!lblMessage || !this.message)
			{
				return;
			}

			lblMessage.includeInLayout = lblMessage.visible = true;
			if (historyPaths && historyPaths.length == 0)
			{
				value = "Select path to continue";
				type = AbstractSetting.MESSAGE_CRITICAL;
			}

			switch (type)
			{
				case AbstractSetting.MESSAGE_CRITICAL:
					lblMessage.setStyle("color", 0xff0000);
					break;
				case AbstractSetting.MESSAGE_IMPORTANT:
					lblMessage.setStyle("color", 0x0099ff);
					break;
				default:
					lblMessage.setStyle("color", 0x666666);
					break;
			}

			lblMessage.text = value;
		}

		private function onBrowserForDirectory(fileDir:Object):void
		{
			setting.stringValue = fileDir.nativePath;
			historyPaths.addItem(setting.stringValue);

			setting.dispatchEvent(new Event(AbstractSetting.PATH_SELECTED));
		}

		private function onChangePathClick(event:MouseEvent):void
		{
			var startFromLocation:String = setting.provider[setting.name] ?
					                       setting.provider[setting.name] :
					                       setting.projectDirectoryPath;
			model.fileCore.browseForDirectory("Select directory", onBrowserForDirectory, null, startFromLocation);
		}

		private function onClearPathClick(event:MouseEvent):void
		{
			setting.stringValue = "";
			lblMessage.text = "";
		}

		private function onProjectDirectoryPathRendererCreationComplete(event:FlexEvent):void
		{
			historyPaths = ObjectUtil.copy(model.recentSaveProjectPath) as ArrayCollection;
			if (historyPaths.length == 0)
			{
				historyPaths.addItem(setting.provider[setting.name]);
			}

			setting.dispatchEvent(new Event(AbstractSetting.PATH_SELECTED));

			setMessage(this.message, this.messageType);
		}
		]]>
	</fx:Script>
	
	<s:HGroup width="100%">
		<s:Label styleName="uiTextSettingsLabel"
				 text="{setting.label}" />
		
		<mx:Spacer width="100%"/>
		
		<s:Button label="Clear"
				  skinClass="{LinkButtonSkin}"
				  click="onClearPathClick(event)" />
		
		<s:Button label="Change"
				  skinClass="{LinkButtonSkin}"
				  click="onChangePathClick(event)" />
	</s:HGroup>
	<s:Label id="lblValue"
			 styleName="uiTextSettingsValue"
			 paddingTop="10" width="98%"
			 text="{setting.stringValue? setting.stringValue : 'Not Set' }" />
	<s:Label id="lblMessage" 
			 styleName="uiTextSettingsLabel" color="#666666" width="100%" maxDisplayedLines="3"
			 fontSize="12" includeInLayout="false" visible="false"/>
</s:VGroup>