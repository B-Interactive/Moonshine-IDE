<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009"
		  xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
		  width="100%" paddingLeft="15" paddingTop="15"
		  paddingRight="15" paddingBottom="15">
	
	<fx:Script>
		<![CDATA[
		import actionScripts.plugin.build.vo.BuildActionVO;
		import actionScripts.plugin.settings.vo.AbstractSetting;
		import actionScripts.plugin.settings.vo.BuildActionsListSettings;
		import actionScripts.plugin.settings.vo.StringSetting;

		import components.popup.BuildActionsSelectorPopup;

		import mx.collections.ArrayList;

		import mx.core.FlexGlobals;
		import mx.events.CloseEvent;

		import mx.managers.PopUpManager;

		import spark.events.TextOperationEvent;

		[Bindable]
		public var setting:BuildActionsListSettings;
		private var buildActionsSelectorPopup:BuildActionsSelectorPopup;

		public function setMessage(value:String, type:String):void
		{
			if (!lblMessage || !value)
			{
				return;
			}

			lblMessage.includeInLayout = lblMessage.visible = true;
			switch(type)
			{
				case AbstractSetting.MESSAGE_CRITICAL:
					lblMessage.setStyle("color", 0xff0000);
					break;
				case AbstractSetting.MESSAGE_IMPORTANT:
					lblMessage.setStyle("color", 0x0099ff);
					break;
				default:
					lblMessage.setStyle("color", 0x666666);
					break;
			}

			lblMessage.text = value;
		}


		private function onTextChange(event:TextOperationEvent):void
		{
			setting.dispatchEvent(new Event(StringSetting.VALUE_UPDATED));
		}

		private function onBtnClearClick(event:MouseEvent):void
		{
			setting.stringValue = "";
			lblMessage.text = "";
		}

		private function onBtnChangeClick(event:MouseEvent):void
		{
			buildActionsSelectorPopup = PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, BuildActionsSelectorPopup, true) as BuildActionsSelectorPopup;
			buildActionsSelectorPopup.addEventListener("actionSelected", onBuildActionsSelectorPopupActionSelected);
			buildActionsSelectorPopup.addEventListener(CloseEvent.CLOSE, onBuildActionsSelectorPopupClose);

			buildActionsSelectorPopup.actions = new ArrayList(setting.buildActions);
			buildActionsSelectorPopup.selectedItem = this.getCurrentItem();

			PopUpManager.centerPopUp(buildActionsSelectorPopup);
		}

		private function onBuildActionsSelectorPopupActionSelected(event:Event):void
		{
			if (buildActionsSelectorPopup.selectedItem)
			{
				setting.stringValue = buildActionsSelectorPopup.selectedItem.action;
			}
		}

		private function onBuildActionsSelectorPopupClose(event:CloseEvent):void
		{
			buildActionsSelectorPopup.removeEventListener("actionSelected", onBuildActionsSelectorPopupActionSelected);
			buildActionsSelectorPopup.removeEventListener(CloseEvent.CLOSE, onBuildActionsSelectorPopupClose);
			buildActionsSelectorPopup = null;
		}

		public function getCurrentItem():BuildActionVO
		{
			for each (var item:BuildActionVO in setting.buildActions)
			{
				if (item.action == selectedActionValue.text)
				{
					return item;
				}
			}

			return null;
		}
		]]>
	</fx:Script>

	<s:HGroup width="100%">

		<s:Label id="lbl"
				 styleName="uiTextSettingsLabel"
				 text="{setting.label}"/>

		<mx:Spacer width="100%"/>

		<s:Button label="Clear"
				  skinClass="{LinkButtonSkin}"
				  click="onBtnClearClick(event)" />
		<s:Button label="Change"
				  skinClass="{LinkButtonSkin}"
				  click="onBtnChangeClick(event)" />
	</s:HGroup>
	<s:TextInput id="selectedActionValue"
				 styleName="uiTextSettingsValue"
				 height="100%" width="100%"
				 textAlign="left"
				 borderVisible="false"
				 contentBackgroundAlpha="1"
				 unfocusedTextSelectionColor="#a8c6ee"
				 focusAlpha="0"
				 change="onTextChange(event)"
				 contentBackgroundColor="#FFFFFF"
				 text="@{setting.stringValue}"/>
	<s:Label id="lblMessage"
			 styleName="uiTextSettingsLabel" color="#666666" width="100%" maxDisplayedLines="3"
			 fontSize="12" includeInLayout="false" visible="false" paddingLeft="15"/>
</s:VGroup>