<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 2016-present Prominic.NET, Inc.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:VGroup 
	xmlns:fx="http://ns.adobe.com/mxml/2009"
  	xmlns:s="library://ns.adobe.com/flex/spark"
  	width="100%"
  	gap="0"
  	paddingTop="15"
  	paddingBottom="5" initialize="onInitialization(event)">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import spark.components.RadioButton;
			import spark.events.IndexChangeEvent;
			
			import actionScripts.plugin.actionscript.as3project.vo.LibrarySettingsVO;
			
			[Bindable] public var setting:NewLibraryProjectSetting;
			
			[Bindable] private var types:ArrayCollection;
			[Bindable] private var configOptions:ArrayCollection;
			
			private var _librarySettingObject:LibrarySettingsVO = new LibrarySettingsVO();
			public function get librarySettingObject():LibrarySettingsVO
			{
				_librarySettingObject.type = cmbOption.selectedItem;
				_librarySettingObject.output = radioButtonGroup.selectedValue as String;
				_librarySettingObject.includeAIR = cbAIR.selected;
				
				return _librarySettingObject;
			}
			
			protected function onInitialization(event:FlexEvent):void
			{
				types = new ArrayCollection([LibrarySettingsVO.FLEX_LIBRARY, LibrarySettingsVO.ACTIONSCRIPT_LIBRARY, LibrarySettingsVO.MOBILE_LIBRARY]);
				configOptions = new ArrayCollection([{label:LibrarySettingsVO.GENERIC, selected:true}, {label:LibrarySettingsVO.MOBILE, selected:false}]);
			}
			
			private function itemRendererFunction_handler(item:Object):ClassFactory
			{	
				var props:Object = {
					label : item.label,
						value : item.label,
						selected: item.selected,
						group : radioButtonGroup
				};
				
				var factory:ClassFactory = new ClassFactory(RadioButton);
				factory.properties = props;
				return factory;
			}
			
			protected function onTypeChange(event:IndexChangeEvent):void
			{
				if (cmbOption.selectedIndex == 2)
				{
					radioButtonGroup.selectedIndex = 1;
					dgOutput.enabled = false;
					cbAIR.selected = true;
					cbAIR.enabled = false;
				}
				else
				{
					dgOutput.enabled = true;
					cbAIR.enabled = true;
				}
			}
			
			protected function onOutputChange(event:Event):void
			{
				if (radioButtonGroup.selectedIndex == 1)
				{
					cbAIR.selected = true;
					cbAIR.enabled = false;
				}
				else
				{
					cbAIR.enabled = true;
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:RadioButtonGroup id="radioButtonGroup" change="onOutputChange(event)"/>
	</fx:Declarations>
	
	<s:VGroup width="100%" paddingLeft="15" paddingBottom="15" paddingRight="15"
			  verticalAlign="middle">
		<s:Label id="lbl"
				 styleName="uiTextSettingsLabel"
				 text="Select Library Type"/>
		
		<s:DropDownList id="cmbOption"
						width="100%" height="24"
						dataProvider="{types}" change="onTypeChange(event)"
						requireSelection="true" contentBackgroundColor="#FFFFFF"/>
	</s:VGroup>
	
	<s:Rect width="100%"
			alpha="1">
		<s:stroke>
			<s:SolidColorStroke weight="1" color="0xdadada"/>
		</s:stroke>
	</s:Rect>
	
	<s:HGroup width="100%" paddingLeft="15" paddingTop="15" paddingBottom="15" paddingRight="15">
		<s:Label text="Output Configuration"
				 styleName="uiTextSettingsLabel" paddingTop="4"/>
		<s:Spacer width="100%"/>
		<s:DataGroup id="dgOutput"
					 styleName="uiTextSettingsValue"
					 itemRendererFunction="itemRendererFunction_handler"
					 dataProvider="{configOptions}">
					<s:layout>
						<s:VerticalLayout/>
					</s:layout>
		</s:DataGroup>
	</s:HGroup>
	
	<s:Rect width="100%"
			alpha="1">
		<s:stroke>
			<s:SolidColorStroke weight="1" color="0xdadada"/>
		</s:stroke>
	</s:Rect>
	
	<s:HGroup width="100%" paddingLeft="15" paddingTop="15" paddingBottom="10" paddingRight="15" verticalAlign="middle">
		<s:Label text="Include Adobe AIR Libraries"
				 styleName="uiTextSettingsLabel"/>
		<s:Spacer width="100%"/>
		<s:CheckBox id="cbAIR"/>
	</s:HGroup>
</s:VGroup>