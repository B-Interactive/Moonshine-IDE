<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:ItemRenderer
	xmlns:fx="http://ns.adobe.com/mxml/2009"
  	xmlns:s="library://ns.adobe.com/flex/spark"
  	width="100%"
  	autoDrawBackground="false">

	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import spark.events.TextOperationEvent;
			
			import actionScripts.factory.FileLocation;
			import actionScripts.utils.OSXBookmarkerNotifiers;
			
			public static const EVENT_BROWSE_FILE:String = "browseFile"
			public static const EVENT_BROWSE_DIR:String = "browseDir";
			public static const EVENT_REMOVE_ITEM:String = "removeItem";
			public static const EVENT_MANUAL_UPDATE:String = "manualUpdate";
			
			[Bindable] public var allowFiles:Boolean;
			[Bindable] public var allowFolders:Boolean;
			[Bindable] public var showRemove:Boolean = true;

			public var fileMustExist:Boolean;
			
			[Bindable] private var isFileExists:Boolean = false;
			
			override public function set data(value:Object):void
			{
				if (value)
				{
					super.data = value;
					path.buttonMode = false;
					path.editable = path.mouseChildren = ((value.label == PathListSettingRenderer.NOT_SET_PATH_MESSAGE) ? false : true);
					icoMainSourceFolder.includeInLayout = icoMainSourceFolder.visible = value.isMainSourceFolder;
					onCreationCompletes(null);
				}
			}
						
			protected function onPathManualChange(event:TextOperationEvent):void
			{
				if (data)
				{
					dispatchEvent(new Event(EVENT_MANUAL_UPDATE, true));
				}
			}
			
			protected function onCreationCompletes(event:FlexEvent):void
			{
				var tmpLocalCheckPath:String;
				if (data && data.label == PathListSettingRenderer.NOT_SET_PATH_MESSAGE)
				{
					isFileExists = false;
				}
				else if (data && (data.file.fileBridge.nativePath.indexOf("{locale}") != -1))
				{
					tmpLocalCheckPath = OSXBookmarkerNotifiers.isValidLocalePath(data.file as FileLocation);
					if (tmpLocalCheckPath != null)
					{
						isFileExists = (new FileLocation(tmpLocalCheckPath)).fileBridge.exists;
					}
				}
				else if (data && data.file.fileBridge.exists)
				{
					isFileExists = true;
				}
				else
				{
					isFileExists = false;
				}
			}
			
		]]>
	</fx:Script>

	<s:HGroup 
		width="100%" 
		paddingLeft="15"
		verticalAlign="middle">
		<s:Image id="icoMainSourceFolder"
				 source="@Embed('/elements/images/icoSource.png')"
				 includeInLayout="false" visible="false"/>
		<s:TextInput id="path"
					 width="100%"
					 styleName="uiTextSettingsValue"
					 height="100%"
					 borderVisible="false"
					 contentBackgroundAlpha="0"
					 focusAlpha="0"
					 text="{data ? data.label : 'Click to add'}"
					 change="onPathManualChange(event)"
					 buttonMode="true" editable="false" mouseChildren="false"/>
		<!--<s:Label id="path"
			width="100%"
			text="{data ? data.label : 'Click to add'}"
			styleName="uiTextSettingsValue" />	-->
		
		<s:Spacer width="10"/>
		<s:Button 
			label="Browse file"
			styleName="lightButton"
			visible="{allowFiles}"
			includeInLayout="{allowFiles}"
			click="{dispatchEvent(new Event(EVENT_BROWSE_FILE, true))}"
			/>
	
		<s:Button 
			label="Browse dir"
			styleName="lightButton"
			visible="{allowFolders}"
			includeInLayout="{allowFolders}"
			click="{dispatchEvent(new Event(EVENT_BROWSE_DIR, true))}"                    
			/>
	
		<s:Button 
			width="20"
			label="â€“"
			styleName="lightButtonTight"
			visible="{showRemove}"
			click="{dispatchEvent(new Event(EVENT_REMOVE_ITEM, true))}"
			/>
		<s:Image source="@Embed('/elements/images/tick_circle_frame.png')"
				 toolTip="Path exists."
				 visible="{isFileExists}" includeInLayout="{isFileExists}"/>
		<s:Image source="@Embed('/elements/images/cross_circle_frame.png')"
				 toolTip="Path is invalid or does not exists."
				 visible="{!isFileExists &amp;&amp; data}" includeInLayout="{!isFileExists &amp;&amp; data}"/>
	</s:HGroup>
	
</s:ItemRenderer>