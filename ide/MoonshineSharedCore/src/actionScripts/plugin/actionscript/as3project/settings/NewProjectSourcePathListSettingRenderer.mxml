<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 2016-present Prominic.NET, Inc.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:VGroup 
	xmlns:fx="http://ns.adobe.com/mxml/2009"
  	xmlns:s="library://ns.adobe.com/flex/spark"
  	width="100%"
  	gap="0"
  	paddingTop="15"
  	paddingBottom="5"
  	paddingLeft="15"
  	paddingRight="15">
	
	<fx:Script>
		<![CDATA[
		import actionScripts.valueObjects.FileWrapper;

		import mx.core.FlexGlobals;
		import mx.events.CloseEvent;
		import mx.managers.PopUpManager;

		import actionScripts.events.NewFileEvent;
		import actionScripts.factory.FileLocation;

		import components.popup.NewProjectFilePathPopup;
		import components.popup.NewProjectSourcePathPopup;

		[Bindable]
		public var setting:NewProjectSourcePathListSetting;

		private var newProjectSourcePathPopup:NewProjectSourcePathPopup;
		private var newProjectFilePathPopup:NewProjectFilePathPopup;
		private var sourceFolderWrapper:FileWrapper;
		private var sourceFolderLocation:FileLocation;
		private var sourceFileLocation:FileLocation;

		public function resetAllProjectPaths():void
		{
			sourceFolderLocation = sourceFileLocation = null;
			pathFolder.text = pathFile.text = "";
			setting.stringValue = "";
		}

		protected function onBrowseSourceDir():void
		{
			if(!newProjectSourcePathPopup)
			{
				newProjectSourcePathPopup = PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, NewProjectSourcePathPopup, true) as NewProjectSourcePathPopup;
				newProjectSourcePathPopup.addEventListener(CloseEvent.CLOSE, handleSourceFolderPopupClose);
				newProjectSourcePathPopup.addEventListener(NewFileEvent.EVENT_FILE_SELECTED, onSourceFolderSelected);

				newProjectSourcePathPopup.wrapperBelongToProject = setting.project;
				PopUpManager.centerPopUp(newProjectSourcePathPopup);
			}
		}

		protected function handleSourceFolderPopupClose(event:CloseEvent):void
		{
			newProjectSourcePathPopup.removeEventListener(CloseEvent.CLOSE, handleSourceFolderPopupClose);
			newProjectSourcePathPopup.removeEventListener(NewFileEvent.EVENT_FILE_SELECTED, onSourceFolderSelected);
			newProjectSourcePathPopup = null;
		}


		protected function onSourceFolderSelected(event:NewFileEvent):void
		{
			pathFolder.text = getLabelFor(event.insideLocation.file);
			sourceFolderWrapper = event.insideLocation;
			sourceFolderLocation = event.insideLocation.file;

			updateToSettings();
		}

		private function getLabelFor(file:Object):String
		{
			var tmpFL:FileLocation = (file is FileLocation) ? file as FileLocation : new FileLocation(file.nativePath);
			var lbl:String = setting.project.folderLocation.fileBridge.getRelativePath(tmpFL, true);

			return lbl;
		}

		protected function onBrowseSourceFile():void
		{
			if(!newProjectFilePathPopup)
			{
				newProjectFilePathPopup = PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, NewProjectFilePathPopup, true) as NewProjectFilePathPopup;
				newProjectFilePathPopup.addEventListener(CloseEvent.CLOSE, handleSourceFilePopupClose);
				newProjectFilePathPopup.addEventListener(NewFileEvent.EVENT_FILE_SELECTED, onSourceFileSelected);

				newProjectFilePathPopup.folderWrapper = sourceFolderWrapper;
				PopUpManager.centerPopUp(newProjectFilePathPopup);
			}
		}

		protected function handleSourceFilePopupClose(event:CloseEvent):void
		{
			newProjectFilePathPopup.removeEventListener(CloseEvent.CLOSE, handleSourceFilePopupClose);
			newProjectFilePathPopup.removeEventListener(NewFileEvent.EVENT_FILE_SELECTED, onSourceFileSelected);
			newProjectFilePathPopup = null;
		}


		protected function onSourceFileSelected(event:NewFileEvent):void
		{
			pathFile.text = event.filePath.split(sourceFolderLocation.fileBridge.separator).pop();
			sourceFileLocation = new FileLocation(event.filePath);

			updateToSettings();
		}

		private function updateToSettings():void
		{
            if (!setting.project.isLibraryProject && sourceFolderLocation && sourceFileLocation)
            {
                setting.stringValue = sourceFolderLocation.fileBridge.nativePath +","+ sourceFileLocation.fileBridge.nativePath;
            }
            else if (setting.project.isLibraryProject && sourceFolderLocation)
            {
                setting.stringValue = sourceFolderLocation.fileBridge.nativePath;
            }
		}
		]]>
	</fx:Script>
	
	<s:Label 
		text="{setting.label}"
		styleName="uiTextSettingsLabel"/>
		
	<s:HGroup 
		width="100%" 
		paddingLeft="15" paddingBottom="10"
		verticalAlign="middle">
		<s:TextInput id="pathFolder"
					 width="100%"
					 styleName="uiTextSettingsValue"
					 height="100%"
					 borderVisible="false"
					 contentBackgroundAlpha="0"
					 focusAlpha="0"
					 buttonMode="true" editable="false" mouseChildren="false"/>
		<s:Spacer width="10"/>
		<s:Button 
			label="Browse dir"
			styleName="lightButton"
			click="onBrowseSourceDir()"/>
	</s:HGroup>
	
	<s:Rect width="100%"
			alpha="1">
		<s:stroke>
			<s:SolidColorStroke weight="1" color="0xdadada"/>
		</s:stroke>
	</s:Rect>
	
	<s:Label text="Main application file"
			 styleName="uiTextSettingsLabel" paddingTop="19"/>
	
	<s:HGroup width="100%" paddingLeft="15" paddingBottom="4" verticalAlign="middle">
		<s:TextInput id="pathFile"
					 width="100%"
					 styleName="uiTextSettingsValue"
					 height="100%"
					 borderVisible="false"
					 contentBackgroundAlpha="0"
					 focusAlpha="0"
					 buttonMode="true" editable="false" mouseChildren="false"
					 enabled="{!setting.project.isLibraryProject}"/>
		<s:Spacer width="10"/>
		<s:Button 
			label="Browse file"
			styleName="lightButton"
			click="onBrowseSourceFile()"
			enabled="{!setting.project.isLibraryProject}"/>
	</s:HGroup>
</s:VGroup>