<?xml version="1.0"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009"
                xmlns:s="library://ns.adobe.com/flex/spark"
                xmlns:codecompletionlist="actionScripts.ui.codeCompletionList.*" maxWidth="650"
                addedToStage="onItemAddedToStage(event)" removedFromStage="onItemRemovedFromStage(event)">
    <s:HGroup id="labelDisplayGroup" gap="2" horizontalAlign="left" verticalAlign="middle"
              left="2" right="{detailsGroup.width + 10}" verticalCenter="0">
        <codecompletionlist:CodeIconIndicator id="codeIconIndicator" data="{data}"/>
        <s:Label id="labelDisplay" color="0x101010" verticalCenter="0" fontSize="12"
                 textAlign="left" showTruncationTip="true" maxDisplayedLines="1" maxWidth="250"/>
        <s:Label id="details" fontSize="10" textAlign="left" showTruncationTip="true"
                 maxDisplayedLines="1" maxWidth="310" color="0x606060"
                 visible="{data.kind == CompletionItemKind.CLASS}" includeInLayout="{data.kind == CompletionItemKind.CLASS}"/>
    </s:HGroup>
    <s:HGroup id="detailsGroup" right="4" verticalCenter="0" gap="2"
              verticalAlign="middle" horizontalAlign="right" maxWidth="220">
        <s:Label id="displayType" color="0x606060" textAlign="right" fontSize="12"
                 showTruncationTip="true" maxDisplayedLines="1"/>
        <codecompletionlist:CodeIconIndicator id="infoIndicator" currentState="info" data="{data}"
                                              click="onCodeIconIndicatorClick(event)" width="20"/>
    </s:HGroup>
    <fx:Script><![CDATA[
        import actionScripts.events.GlobalEventDispatcher;
        import actionScripts.ui.codeCompletionList.ToolTipPopupWithTimer;
        import actionScripts.valueObjects.CompletionItemKind;

        import mx.managers.PopUpManager;

        private var signatureToolTip:ToolTipPopupWithTimer;
        private var dispatcher:GlobalEventDispatcher = GlobalEventDispatcher.getInstance();

        override public function set data(value:Object):void {
            super.data = value;
            if (value) {
                if (displayType) {
                    displayType.text = getDisplayType(value.detail);
                }

                if (codeIconIndicator) {
                    codeIconIndicator.currentState = getDisplayKind(data.kind);
                }

                if (details && data.kind == CompletionItemKind.CLASS && data.detail) {
                    details.text = getShortDetails(data.detail);
                }
            }
        }

        override protected function set hovered(value:Boolean):void {
            if (selected && data) {
                this.toolTip = null;
            } else if (data) {
                this.toolTip = data.detail;
            }

            super.hovered = value;
        }

        override public function set selected(value:Boolean):void {
            super.selected = value;
            if (signatureToolTip && !selected) {
                signatureToolTip.close();
            }
        }

        private function onCodeIconIndicatorClick(event:MouseEvent):void {
            dispatcher.dispatchEvent(new Event("showDocumentation"));
        }

        private function showSignatureToolTip():void {
            if (!signatureToolTip) return;

            if (!selected) {
                signatureToolTip.close();
            }

            if (selected && data) {
                callLater(refreshSignatureToolTip);
                PopUpManager.addPopUp(signatureToolTip, this);
            }
        }

        private function refreshSignatureToolTip():void {
            if (!signatureToolTip) return;

            var toolTipPosition:Point = localToGlobal(new Point(labelDisplay.x, labelDisplay.y + labelDisplay.height));
            signatureToolTip.text = data.detail;
            signatureToolTip.x = toolTipPosition.x + labelDisplay.width;
            signatureToolTip.y = toolTipPosition.y;
        }

        private function onItemAddedToStage(event:Event):void {
            if (!signatureToolTip) {
                signatureToolTip = new ToolTipPopupWithTimer();
            }
            dispatcher.addEventListener("showDocumentation", onItemShowDocumentation);
        }

        private function onItemRemovedFromStage(event:Event):void {
            if (signatureToolTip) {
                signatureToolTip.close();
                signatureToolTip = null;
            }

            dispatcher.removeEventListener("showDocumentation", onItemShowDocumentation);
        }

        private function onItemShowDocumentation(event:Event):void {
            showSignatureToolTip();
        }

        public function getDisplayKind(kind:int):String {
            switch (kind) {
                case CompletionItemKind.CLASS: {
                    return "Class";
                }
                case CompletionItemKind.COLOR: {
                    return "Color";
                }
                case CompletionItemKind.CONSTANT: {
                    return "Constant";
                }
                case CompletionItemKind.CONSTRUCTOR: {
                    return "Constructor";
                }
                case CompletionItemKind.ENUM: {
                    return "Enum";
                }
                case CompletionItemKind.ENUM_MEMBER: {
                    return "EnumMember";
                }
                case CompletionItemKind.EVENT: {
                    return "Event";
                }
                case CompletionItemKind.FIELD: {
                    return "Field";
                }
                case CompletionItemKind.FILE: {
                    return "File";
                }
                case CompletionItemKind.FOLDER: {
                    return "Folder";
                }
                case CompletionItemKind.FUNCTION: {
                    return "Function";
                }
                case CompletionItemKind.INTERFACE: {
                    return "Interface";
                }
                case CompletionItemKind.KEYWORD: {
                    return "Keyword";
                }
                case CompletionItemKind.METHOD: {
                    return "Method";
                }
                case CompletionItemKind.MODULE: {
                    return "Module";
                }
                case CompletionItemKind.OPERATOR: {
                    return "Operator";
                }
                case CompletionItemKind.PROPERTY: {
                    return "Property";
                }
                case CompletionItemKind.REFERENCE: {
                    return "Reference";
                }
                case CompletionItemKind.SNIPPET: {
                    return "Snippet";
                }
                case CompletionItemKind.STRUCT: {
                    return "Struct";
                }
                case CompletionItemKind.TEXT: {
                    return "Text";
                }
                case CompletionItemKind.TYPE_PARAMETER: {
                    return "TypeParameter";
                }
                case CompletionItemKind.UNIT: {
                    return "Unit";
                }
                case CompletionItemKind.VALUE: {
                    return "Value";
                }
                case CompletionItemKind.VARIABLE: {
                    return "Variable";
                }
            }
            return null;
        }

        public function getDisplayType(detail:String):String {
            if (detail && (data.kind == CompletionItemKind.METHOD
                    || data.kind == CompletionItemKind.PROPERTY
                    || data.kind == CompletionItemKind.VARIABLE)) {
                var lastColonIndex:int = detail.lastIndexOf(":");
                return detail.substring(lastColonIndex + 1);
            } else {
                return this.getDisplayKind(data.kind);
            }
        }

        private function getShortDetails(detail:String):String
        {
            var firstSpaceIndex:int = detail.indexOf(" ");
            if (firstSpaceIndex > -1)
            {
                return detail.substr(firstSpaceIndex + 1, detail.length);
            }

            return detail;
        }
        ]]></fx:Script>
</s:ItemRenderer>
