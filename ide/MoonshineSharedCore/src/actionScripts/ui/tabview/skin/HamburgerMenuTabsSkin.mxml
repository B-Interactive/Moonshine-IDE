<?xml version="1.0"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 2016-present Prominic.NET, Inc.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
             alpha.disabled=".5" creationComplete="onHamburgerMenuTabsSkinCreationComplete(event)">

    <!-- host component -->
    <fx:Metadata>
    <![CDATA[
        /**
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.DropDownList")]
        ]]>
    </fx:Metadata>

    <fx:Script>
        <![CDATA[
        import mx.events.CollectionEvent;
        import mx.events.CollectionEventKind;
        import mx.events.FlexEvent;

        /* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
        static private const contentFill:Array = ["bgFill"];

        [Embed("/elements/images/hamburger_menu_icon.png")]
        private const hamburgerIcon:Class;

        [Bindable]
        private var itemsCount:String;

        /**
         * @private
         */
        override public function get contentItems():Array
        {
            return contentFill;
        }

        /**
         * @private
         */
        override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
        {
            openButton.setStyle("cornerRadius", getStyle("cornerRadius"));

            if (borderStroke)
            {
                borderStroke.color = getStyle("borderColor");
                borderStroke.alpha = getStyle("borderAlpha");
            }

            super.updateDisplayList(unscaledWidth, unscaledHeight);
        }

        private function onHamburgerMenuTabsSkinCreationComplete(event:FlexEvent):void
        {
            removeEventListener(FlexEvent.CREATION_COMPLETE, onHamburgerMenuTabsSkinCreationComplete);
            hostComponent.dataProvider.addEventListener(CollectionEvent.COLLECTION_CHANGE, onHamburgerTabsCollectionChange);
        }

        private function onHamburgerTabsCollectionChange(event:CollectionEvent):void
        {
            if (event.kind == CollectionEventKind.REMOVE)
            {
                var timeoutValue:int = setTimeout(function ():void {
                    clearTimeout(timeoutValue);
                    itemsCount = String(hostComponent.dataProvider.length);
                }, 50);
            }
            else
            {
                itemsCount = String(hostComponent.dataProvider.length);
            }
        }
        ]]>
    </fx:Script>

    <s:states>
        <s:State name="normal" />
        <s:State name="open" />
        <s:State name="disabled" />
    </s:states>

    <!---
     The PopUpAnchor control that opens the drop-down list.

     <p>In a custom skin class that uses transitions, set the
     <code>itemDestructionPolicy</code> property to <code>never</code>.</p>
    -->
    <s:PopUpAnchor id="popUp"  displayPopUp.normal="false" displayPopUp.open="true" includeIn="open"
                   left="0" right="0" top="0" bottom="0" itemDestructionPolicy="auto"
                   popUpPosition="below">

        <!---
         This includes borders, background colors, scrollers, and filters.
         @copy spark.components.supportClasses.DropDownListBase#dropDown
        -->
        <s:Group id="dropDown">

            <!--- @private -->
            <s:Rect id="border" left="0" right="0" top="0" bottom="0">
                <s:stroke>
                    <!--- border stroke @private -->
                    <s:SolidColorStroke id="borderStroke" weight="1"/>
                </s:stroke>
            </s:Rect>

            <!-- fill -->
            <!--- Defines the appearance of drop-down list's background fill. -->
            <s:Rect id="background" left="1" right="1" top="1" bottom="1" >
                <s:fill>
                    <!---
                     The color of the drop down's background fill.
                     The default color is 0xFFFFFF.
                    -->
                    <s:SolidColor id="bgFill" color="0xFFFFFF" />
                </s:fill>
            </s:Rect>

            <!--- @private -->
            <s:Scroller id="scroller" left="0" top="0" right="0" bottom="0" hasFocusableChildren="false" minViewportInset="1">
                <!--- @copy spark.components.SkinnableDataContainer#dataGroup-->
                <s:DataGroup id="dataGroup" itemRenderer="spark.skins.spark.DefaultItemRenderer">
                    <s:layout>
                        <s:VerticalLayout gap="0" horizontalAlign="contentJustify" requestedMinRowCount="1" requestedMaxRowCount="6"/>
                    </s:layout>
                </s:DataGroup>
            </s:Scroller>
        </s:Group>
    </s:PopUpAnchor>

    <!---  The default skin is DropDownListButtonSkin.
            @copy spark.components.supportClasses.DropDownListBase#openButton
            @see spark.skins.spark.DropDownListButtonSkin -->


    <s:HGroup id="hamburgerMenuGroup" gap="2" right="7" top="2" bottom="2" verticalAlign="middle" horizontalAlign="right"
              focusEnabled="false" tabEnabled="false">
        <s:BitmapImage source="{hamburgerIcon}" height="20"/>
         <!--- @copy spark.components.DropDownList#labelDisplay -->
        <s:Label verticalAlign="middle" maxDisplayedLines="1"
                 mouseEnabled="false" mouseChildren="false" textAlignLast="end" height="20" paddingBottom="-4"
                 focusEnabled="false" tabEnabled="false" color="#FFFFFF" fontWeight="bold" text="{itemsCount}"/>
    </s:HGroup>
    <s:Button id="openButton" left="0" right="0" top="0" bottom="0" focusEnabled="false" tabEnabled="false"
              skinClass="actionScripts.ui.tabview.skin.HamburgerMenuTabsButtonSkin"/>
</s:SparkSkin>
