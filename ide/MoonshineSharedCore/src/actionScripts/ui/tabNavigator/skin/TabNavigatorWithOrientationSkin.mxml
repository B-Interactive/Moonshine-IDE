<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 2016-present Prominic.NET, Inc.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->

<!--- The default skin class for a Spark Navigator container.

 @see spark.containers.Navigator

 @langversion 3.0
 @playerversion Flash 10
 @playerversion AIR 1.5
 @productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:s="library://ns.adobe.com/flex/spark"
             xmlns:containers="spark.containers.*"
			 xmlns:tabnavigator="actionScripts.ui.tabNavigator.*"
			 alpha.disabled="0.5"
			 currentStateChanging="onTabNavigatorCurrentStateChanging(event)"
			 currentStateChange="onTabNavigatorCurrentStateChange(event)">
	<fx:Metadata>
        <![CDATA[
		[HostComponent("actionScripts.ui.tabNavigator.TabNavigatorWithOrientation")]
		]]>
    </fx:Metadata>
	<fx:Script>
		<![CDATA[
		import mx.events.StateChangeEvent;

		import spark.layouts.ColumnAlign;
		import spark.layouts.VerticalLayout;
		import spark.layouts.HorizontalLayout;
		import spark.layouts.TileLayout;
		import spark.layouts.TileOrientation;

		/* Define the skin elements that should not be colorized.
		For list, the skin itself is colorized but the individual parts are not. */
		static private const exclusions:Array = [ "contentGroup", "background" , "tabBar"];

		/**
		 * @private
		 */
		override public function get colorizeExclusions():Array { return exclusions; }

		/* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
		static private const contentFill:Array = [ "bgFill" ];

		/**
		 * @private
		 */
		override public function get contentItems():Array { return contentFill; }

		/**
		 * @private
		 */
		override protected function initializationComplete():void
		{
			useChromeColor = true;
			super.initializationComplete();
		}

		/**
		 * @private
		 */
		override protected function updateDisplayList( unscaledWidth:Number, unscaledHeight:Number ):void
		{
			if( getStyle( "borderVisible" ) == true )
			{
				border.visible = true;
				background.left = background.top = background.right = background.bottom = 1;
				contentGroup.left = contentGroup.top = contentGroup.right = contentGroup.bottom = 1;
			}
			else
			{
				border.visible = false;
				background.left = background.top = background.right = background.bottom = 0;
				contentGroup.left = contentGroup.top = contentGroup.right = contentGroup.bottom = 0;
			}

			borderStroke.color = getStyle( "borderColor" );
			borderStroke.alpha = getStyle( "borderAlpha" );

			super.updateDisplayList( unscaledWidth, unscaledHeight );
		}

		private function onTabNavigatorCurrentStateChange(event:StateChangeEvent):void
		{
			if (!this.tabBar || !this.content) return;

			var tabBarIndex:int = this.getElementIndex(this.tabBar);
			var contentIndex:int = this.getElementIndex(this.content);

			if (event.newState == "normal" ||
					event.newState == "normalWithTopTabBar" ||
					event.newState == "normalWithLeftTabBar")
			{

				if (tabBarIndex > 0)
				{
					this.swapElementsAt(tabBarIndex, contentIndex);
				}
			}
			else if (event.newState == "normalWithBottomTabBar" ||
					event.newState == "normalWithRightTabBar")
			{
				if (tabBarIndex == 0)
				{
					this.swapElementsAt(tabBarIndex, contentIndex);
				}
			}
		}

		private function onTabNavigatorCurrentStateChanging(event:StateChangeEvent):void
		{
			this.setSkinLayout(event.newState);
		}

		private function setSkinLayout(state:String):void
		{
			if (state == "normal" || state == "normalWithTopTabBar"	|| state == "normalWithBottomTabBar")
			{
				this.layout = this.getVerticalLayoutWithoutGap();
			}
			else
			{
				this.layout = this.getHorizontalLayoutWithoutGap();
			}
		}

		private function getVerticalLayoutWithoutGap():VerticalLayout
		{
			var vertLayout:VerticalLayout = new VerticalLayout();
			vertLayout.gap = 0;

			return vertLayout;
		}

		private function getHorizontalLayoutWithoutGap():HorizontalLayout
		{
			var horizontalLayout:HorizontalLayout = new HorizontalLayout();
			horizontalLayout.gap = 0;

			return horizontalLayout;
		}
		]]>
	</fx:Script>

	<s:states>
		<s:State name="normal" />
		<s:State name="disabled" />
		<s:State name="normalWithTopTabBar" stateGroups="topBottom"/>
		<s:State name="normalWithLeftTabBar"/>
		<s:State name="normalWithRightTabBar"/>
		<s:State name="normalWithBottomTabBar" stateGroups="topBottom"/>
	</s:states>

	<tabnavigator:TabBarWithScroller id="tabBar" dataProvider="{contentGroup}"
									  orientation="{hostComponent.orientation}"
									  scrollable="{hostComponent.scrollable}"
									  width.topBottom="{hostComponent.width}"/>

	<!--- @private -->
	<s:Group id="content" width="100%" height="100%">

		<!-- border -->
		<!--- @private -->
		<s:Rect left="0" right="0" top="0" bottom="0" id="border">
			<s:stroke>
				<!--- @private -->
				<s:SolidColorStroke id="borderStroke" weight="1"/>
			</s:stroke>
		</s:Rect>

		<!-- fill -->
		<!--- Defines the background appearance of the list-based component. -->
		<s:Rect id="background" left="1" right="1" top="1" bottom="1" >
			<s:fill>
				<!--- Defines the color of the background. The default color is 0xFFFFFF. -->
				<s:SolidColor id="bgFill" color="0xFFFFFF" />
			</s:fill>
		</s:Rect>

		<!--
		Note: setting the minimum size to 0 here so that changes to the host component's
		size will not be thwarted by this skin part's minimum size.   This is a compromise,
		more about it here: http://bugs.adobe.com/jira/browse/SDK-21143
		-->
		<!--- @copy spark.containers.Navigator#contentGroup -->
		<containers:NavigatorGroup id="contentGroup" left="0" right="0" top="0" bottom="0"
								   minWidth="0" minHeight="0" />

	</s:Group>


</s:SparkSkin>
