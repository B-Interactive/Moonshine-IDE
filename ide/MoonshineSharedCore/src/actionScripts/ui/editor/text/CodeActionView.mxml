<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx">

	<s:Button id="icon" styleName="codeActionButton"
		click="icon_clickHandler(event)"/>
	<s:PopUpAnchor id="anchor" popUpPosition="below" width="{icon.height}" height="{icon.height}">
		<s:List id="menu" dataProvider="{codeActions}" labelField="title"
			selectedIndex="-1"
			change="list_changeHandler(event)">
			<s:layout>
				<s:VerticalLayout gap="0" horizontalAlign="contentJustify" requestedMinRowCount="1" requestedMaxRowCount="6"/>
			</s:layout>
		</s:List>
	</s:PopUpAnchor>

	<fx:Script>
		<![CDATA[
			import mx.collections.ICollectionView;
			import flash.events.MouseEvent;
			import moonshine.lsp.Command;
			import actionScripts.events.GlobalEventDispatcher;
			import actionScripts.events.ExecuteLanguageServerCommandEvent;
			import moonshine.lsp.CodeAction;
			import moonshine.lsp.WorkspaceEdit;
			import actionScripts.utils.applyWorkspaceEdit;
			import actionScripts.utils.getProjectForUri;
			import actionScripts.valueObjects.ProjectVO;
			import actionScripts.ui.editor.BasicTextEditor;
			import actionScripts.locator.IDEModel;
			import actionScripts.ui.editor.LanguageServerTextEditor;

			[Bindable]
			public var codeActions:ICollectionView;

			private function icon_clickHandler(event:MouseEvent):void
			{
				anchor.displayPopUp = !anchor.displayPopUp;
			}

			private function list_changeHandler(event:Event):void
			{
				anchor.displayPopUp = false;
				var codeAction:CodeAction = CodeAction(menu.selectedItem);
				menu.selectedIndex = -1;
				
				//if both a WorkspaceEdit and a Command are supplied, the
				//WorkspaceEdit is applied befor the Command
				var edit:WorkspaceEdit = codeAction.edit;
				if(edit)
				{
					applyWorkspaceEdit(edit);
				}
				var command:Command = codeAction.command;
				if(command)
				{
					var lspEditor:LanguageServerTextEditor = IDEModel.getInstance().activeEditor as LanguageServerTextEditor;
					if(!lspEditor || !lspEditor.currentFile)
					{
						return;
					}
					var uri:String = lspEditor.currentFile.fileBridge.url;
					var project:ProjectVO = getProjectForUri(uri);
					GlobalEventDispatcher.getInstance().dispatchEvent(new ExecuteLanguageServerCommandEvent(
						ExecuteLanguageServerCommandEvent.EVENT_EXECUTE_COMMAND,
						project, command.command, command.arguments));
				}
			}

		]]>
	</fx:Script>
</s:Group>