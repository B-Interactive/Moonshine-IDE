<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 2016-present Prominic.NET, Inc.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
	implements="actionScripts.ui.IPanelWindow"
	width="100%"
	height="100%" 
	backgroundColor="0x444444"
	verticalGap="0" xmlns:ns="library://ns.adobe.com/flex/spark" xmlns:project="actionScripts.ui.project.*">
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.ListEvent;
			
			import actionScripts.events.GlobalEventDispatcher;
			import actionScripts.events.OpenFileEvent;
			import actionScripts.factory.FileLocation;
			import actionScripts.plugin.project.ProjectPlugin;
			import actionScripts.valueObjects.FileWrapper;


			protected var filterString:String = "";
			
			
			[Bindable]
			protected var files:ArrayCollection;
			
			override public function setFocus():void
			{
				super.setFocus();
				
				textInput.setFocus();
				textInput.selectRange(textInput.text.length, textInput.text.length);
				updateFilter();
			}
			
			public function setFileList(wrappers:ArrayCollection):void
			{
				files = new ArrayCollection();
				for each (var fw:FileWrapper in wrappers)
				{
					iterateTree(fw);
				}
				
				files.filterFunction = filterFunction;
			} 
			
			protected function iterateTree(fw:FileWrapper):void
			{
				if (fw.children)
				{
					for (var i:int = 0; i < fw.children.length; i++)
					{
						iterateTree(fw.children[i]);
					}	
				}
				else
				{
					files.addItem(fw);
				}
			}
			
			protected function updateFilter():void
			{
				filterString = textInput.text.toLowerCase();
				files.refresh();
				
				list.selectedIndex = 0;
			}
			
			protected function filterFunction(obj:Object):Boolean
			{
				return obj.name.toLowerCase().indexOf(filterString) == 0;
			}
			
			protected function handleItemDoubleClick(event:ListEvent):void
			{
				var fw:FileWrapper = event.itemRenderer.data as FileWrapper;
				if (fw.file.fileBridge.isDirectory) return;
				
				launch(fw.file);
			}
			
			
			// Give the list certain keyboard navigation commands
			private function handleTextKeydown(event:KeyboardEvent):void
			{
				if (event.keyCode == Keyboard.DOWN
					|| event.keyCode == Keyboard.UP)
				{
					list.dispatchEvent(event);
				}
				else if (event.keyCode == Keyboard.ENTER)
				{
					// List seem to have an old selectedItem value sometimes, so we guard against that
					if (files.length == 0) return;
					
					var item:FileWrapper = list.selectedItem as FileWrapper;
					if (item) launch(item.file);
				}
			}
			
			// Open the selected item
			protected function launch(file:FileLocation):void
			{
				GlobalEventDispatcher.getInstance().dispatchEvent(
					new Event(ProjectPlugin.EVENT_SHOW_OPEN_RESOURCE, false, false)
				);
				
				GlobalEventDispatcher.getInstance().dispatchEvent( 
					new OpenFileEvent(OpenFileEvent.OPEN_FILE, [file]) 
				);
			}
			
			private function getIconForFile(object:Object):Class
			{
				return null;
			}
			
		]]>
	</mx:Script>
	
	<project:ProjectViewHeader
		id="header"
		label="Open resource" 
		width="100%"
		/>
	
	<mx:VBox
		backgroundColor="0x353535"
		width="100%"
		height="35"
		verticalAlign="middle"
		horizontalAlign="center">
		
		<ns:TextInput 
			id="textInput"
			paddingLeft="8"
			paddingBottom="0"
			
			width="100%"
			focusThickness="0"
			borderVisible="false"
			contentBackgroundAlpha="0"

			fontSize="12"
			color="0xb6b6b6"
			
			creationComplete="{textInput.setFocus()}"
			change="updateFilter()"
			keyDown="handleTextKeydown(event)">
			
			<ns:filters>
				<ns:DropShadowFilter alpha="0.3" blurX="1" blurY="1" distance="1" angle="90"/>
			</ns:filters>
			
		</ns:TextInput>
		
	</mx:VBox>
	
	<mx:HRule strokeColor="0x2d2d2d" width="100%" height="1" />
	<mx:HRule strokeColor="0x5a5a5a" width="100%" height="1" />
	
	<mx:List
		id="list"
		width="100%"
		height="100%"
		
		doubleClickEnabled="true"
		borderVisible="false"
		rowHeight="18"
		
		selectedIndex="0"
		
		color="0xEEEEEE"
		contentBackgroundColor="0x0"
		rollOverColor="0x393939"
		selectionColor="0x393939"
		alternatingItemColors="[0x444444, 0x4d4c4c]"
		
		dataProvider="{files}"

		itemRenderer="{new ClassFactory(ListItemRenderer)}"		
		iconFunction="{getIconForFile}"
		
		itemDoubleClick="handleItemDoubleClick(event)"
		/>
	
</mx:VBox>
