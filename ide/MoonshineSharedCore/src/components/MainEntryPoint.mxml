<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:ui="actionScripts.ui.*"
		 width="100%" height="100%"
		 preinitialize="onPreInit()" initialize="onInit()" addedToStage="onAddedToStage()">
	<fx:Script>
		<![CDATA[
		import mx.events.FlexEvent;
		
		import actionScripts.factory.BridgeFactory;
		import actionScripts.locator.IDEController;
		import actionScripts.locator.IDEModel;
		import actionScripts.plugin.PluginManager;
		import actionScripts.valueObjects.ConstantsCoreVO;
		import actionScripts.valueObjects.Settings;
		import moonshine.theme.MoonshineTheme;
			
			//--------------------------------------------------------------------------
			//
			//  PRIVATE VARIABLES
			//
			//--------------------------------------------------------------------------
			
			private var controller: IDEController;
			
			//--------------------------------------------------------------------------
			//
			//  PRIVATE API
			//
			//--------------------------------------------------------------------------
			
			/**
			 * On pre-initialization
			 */
			private function onPreInit(): void
			{
				MoonshineTheme.initializeTheme();

				var ideModel:IDEModel = IDEModel.getInstance();

				ideModel.fileCore = BridgeFactory.getFileInstance();
				ideModel.contextMenuCore = BridgeFactory.getContextMenuInstance();
				ideModel.languageServerCore = BridgeFactory.getLanguageServerCoreInstance();
				ideModel.flexCore = BridgeFactory.getFlexCoreInstance();
				ideModel.osxBookmarkerCore = BridgeFactory.getOSXBookmarkerCoreInstance();
				ideModel.aboutCore = BridgeFactory.getAboutInstance();
				ideModel.visualEditorCore = BridgeFactory.getVisualEditorInstance();
				ideModel.clipboardCore = BridgeFactory.getClipboardInstance();
				ideModel.projectCore = BridgeFactory.getProjectInstance();
			}
			
			/**
			 * On initialization
			 */
			private function onInit():void
			{
				// Initialize settings
				if (Settings.os == "win") Settings.keyboard.wordModifierKey = "ctrlKey";
				if (Settings.os == "mac") Settings.keyboard.copyModifierKey = "commandKey";
				
				IDEModel.getInstance().mainView = mainView;
				controller = new IDEController();
			}
			
			/**
			 * On added to stage
			 */
			private function onAddedToStage():void
			{
				ConstantsCoreVO.generate();
				
				var pluginManager:PluginManager = new PluginManager();
				pluginManager.setupPlugins();
			}
			
			/**
			 * On mainview creation completes
			 */
			protected function onMainViewCompletes(event:FlexEvent):void
			{
				if (!ConstantsCoreVO.IS_AIR) mainView.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, onKeyFocusChange);
			}
			
			private function onKeyFocusChange(event:FocusEvent):void
			{
				if (event.keyCode == Keyboard.TAB) event.preventDefault();
			}
			
		]]>
	</fx:Script>
	
	<ui:MainView id="mainView" x="0" y="0" width="100%" height="100%"
				 creationComplete="onMainViewCompletes(event)"/>
	
	<s:BorderContainer cornerRadius="5"
					   borderVisible="false"
					   horizontalCenter="0" verticalCenter="0"
					   includeInLayout="{ConstantsCoreVO.IS_APPLICATION_CLOSING}" visible="{ConstantsCoreVO.IS_APPLICATION_CLOSING}">
		<s:backgroundFill>
			<s:SolidColor color="0x4d4c4c"/>
		</s:backgroundFill>
		<s:Label text="Preparing to close... Please wait"
				 paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10"
				 styleName="textInputLabel" color="0xffea00"/>
	</s:BorderContainer>
</s:Group>