<?xml version="1.0" encoding="utf-8"?>

<!--
	 Scroller unconditionally sets its skin's layout to private layout
	 implementation that handles the scroll policies.  Scroller skins can
	 only provide replacement scrollbars.  The skin's layout and
	 constraints or dimensions set on skin parts will not be honored.  To
	 gain more control over the layout of a viewport and its scrollbars,
	 instead of using Scroller, add them to a Group and use the ScrollBar component's
	 viewport property to link them together.
-->

<!--- The skin class for the Spark Scroller component.

	 @see spark.components.Scroller
-->

<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	creationComplete="created(event)" xmlns:skins="components.skins.*">

	<fx:Metadata>
		<![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.Scroller")]
    ]]>
	</fx:Metadata>

	<fx:Script>
		<![CDATA[
			import actionScripts.ui.resizableControls.ResizeManager;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;

			import spark.components.supportClasses.Skin;

			/**
			 *  @private
			 */
			override public function beginHighlightBitmapCapture():Boolean {
				var needUpdate:Boolean = super.beginHighlightBitmapCapture();

				// Draw an opaque rect that fill our entire skin. Our background
				// is transparent, but we don't want focus/error skins to
				// poke through.  This is safe to do since we don't have any 
				// graphic elements as direct children.
				graphics.beginFill(0);
				graphics.drawRect(0, 0, width, height);
				graphics.endFill();

				return needUpdate;
			}

			/**
			 *  @private
			 */
			override public function endHighlightBitmapCapture():Boolean {
				var needUpdate:Boolean = super.endHighlightBitmapCapture();

				// Clear the rect we drew in beginBitmapCapture();
				graphics.clear();

				return needUpdate;
			}

			override protected function updateDisplayList(w:Number, h:Number):void {
				super.updateDisplayList(w, h);
				resizeHandle.x = w - resizeHandle.width - 1;
				resizeHandle.y = h - resizeHandle.height - 1;
			}

			[Bindable]
			public var resizeManager:ResizeManager;

			private function created(event:FlexEvent):void {
				// the component being resized is assumed to be the parent of the scroller
				// since most scrollers set left/right/top/bottom=0
				var resizeComponent:UIComponent = (hostComponent.parent as UIComponent);
				// Sometimes the parent is actually a skin, in which case we need to resize the host component, not the skin
				if (resizeComponent is Skin) {
					resizeComponent = (resizeComponent["hostComponent"] as UIComponent);
				}
				resizeManager = new ResizeManager(resizeComponent, resizeHandle);
			}
		]]>
	</fx:Script>

	<!---  A vertical scrollbar that lets you control the portion of data that is displayed
		 when there is too much data to fit vertically in a display area.
		 The Scroller determines whether the vertical ScrollBar is visible. -->
	<skins:ResizableVScrollBar id="verticalScrollBar"
		visible="false"/>

	<!---  A horizontal scrollbar that lets you control the portion of data that is displayed
		 when there is too much data to fit horizontally in a display area.
		 The Scroller determines whether the horizontal ScrollBar is visible. -->
	<skins:ResizableHScrollBar id="horizontalScrollBar"
		visible="false"/>

	<skins:ResizeHandleLines id="resizeHandle"
		enabled="{resizeManager.enabled}"
		height="{Math.max(12, horizontalScrollBar.height-2)}"
		width="{Math.max(12, verticalScrollBar.width-2)}"
		visible="{resizeManager.enabled}"/>

</s:SparkSkin>
