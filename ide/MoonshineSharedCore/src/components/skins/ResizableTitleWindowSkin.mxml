<?xml version="1.0" encoding="utf-8"?>
<!--- A skin class for a Spark TitleWindow container which supports resizing the window.

	 @see spark.skins.spark.TitleWindowCloseButtonSkin
	 @see spark.components.TitleWindow
-->
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) STARTcloud, Inc. 2015-2022. All rights reserved.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
	xmlns:s="library://ns.adobe.com/flex/spark"
	xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
	minHeight="76"
	minWidth="76"
	creationComplete="created(event)"
	alpha.disabled="0.5"
	alpha.disabledWithControlBar="0.5"
	blendMode="normal"
	mouseEnabled="false" xmlns:skins="components.skins.*">

	<fx:Metadata>
		<![CDATA[ 
        /** 
         * @copy spark.skins.spark.ApplicationSkin#hostComponent
         */
        [HostComponent("spark.components.TitleWindow")]
        ]]>
	</fx:Metadata>

	<fx:Script fb:purpose="styling">
		/* Define the skin elements that should not be colorized.
		 For panel, border and title background are skinned, but the content area and title text are not. */
		static private const exclusions:Array = ["background", "titleDisplay", "contentGroup"];

		/**
		 * @private
		 */
		override public function get colorizeExclusions():Array {
			return exclusions;
		}

		/**
		 * @private
		 */
		override protected function initializationComplete():void 
		{
			useChromeColor = true;
			if (hostComponent.minWidth != 0) minWidth = hostComponent.minWidth;
			if (hostComponent.minHeight != 0) minHeight = hostComponent.minHeight;
			super.initializationComplete();
		}

		private var cornerRadius:Number;
	</fx:Script>
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import actionScripts.ui.resizableControls.ResizeManager;

			[Bindable]
			public var resizeManager:ResizeManager;

			private function created(event:FlexEvent):void 
			{
				if (hostComponent.minWidth == 0) {
					hostComponent.minWidth = minWidth;
				}
				if (hostComponent.minHeight == 0) {
					hostComponent.minHeight = minHeight;
				}
				resizeManager = new ResizeManager(hostComponent, resizeHandle);
			}
		]]>
	</fx:Script>

	<s:states>
		<s:State name="normal"/>
		<s:State name="inactive"
			stateGroups="inactiveGroup"/>
		<s:State name="disabled"/>
		<s:State name="normalWithControlBar"
			stateGroups="withControls"/>
		<s:State name="inactiveWithControlBar"
			stateGroups="withControls, inactiveGroup"/>
		<s:State name="disabledWithControlBar"
			stateGroups="withControls"/>
	</s:states>
	
	<!--<s:RectangularDropShadow id="dropShadow"
							 bottom="0"
							 color="0x000000"
							 left="0"
							 right="0"
							 top="0"
							 alpha="0.32"
							 alpha.inactiveGroup="0.22"
							 angle="90"
							 blurX="20"
							 blurY="20"
							 distance="11"
							 distance.inactiveGroup="7"/>-->
	
	<s:BorderContainer cornerRadius="6" borderColor="0x2d2d2d"
					   top="0" left="0" right="0" bottom="0">
		<s:backgroundFill>
			<s:SolidColor color="0xa0a0a0"/>
		</s:backgroundFill>

		<s:Group id="topGroupMask"
			bottom="1"
			left="1"
			right="1"
			top="1">
			<!--- @private-->
			<s:Rect id="topMaskRect"
				bottom="0"
				left="0"
				right="0"
				top="0"
				radiusX="6" radiusY="6">
				<s:fill>
					<s:SolidColor color="0xffff00" alpha="0"/>
				</s:fill>
			</s:Rect>
		</s:Group>

		<!--- bottom group mask @private-->
		<s:Group id="bottomGroupMask"
			includeIn="withControls"
			bottom="0"
			left="0"
			right="0"
			top="0">
			<s:Rect id="bottomMaskRect"
				bottom="0"
				left="0"
				right="0"
				top="0" radiusX="6" radiusY="6">
				<s:fill>
					<s:SolidColor color="0xffff00" alpha="0"/>
				</s:fill>
			</s:Rect>
		</s:Group>

		<!-- layer 3: contents -->
		<!--- Contains the vertical stack of title bar content and control bar. -->
		<s:Group id="contents"
			bottom="0"
			left="0"
			right="0"
			top="0">
			<s:layout>
				<s:VerticalLayout horizontalAlign="justify"
					gap="0"/>
			</s:layout>
			<!--- @private -->
			<s:Group id="topGroup"
				mask="{topGroupMask}">

				<!-- layer 3: text -->
				<!--- @copy spark.components.Panel#titleDisplay -->
				<s:Label id="titleDisplay"
					minHeight="30"
					bottom="0"
					fontWeight="bold"
					left="9"
					right="36"
					top="1"
					color="0x292929"
					verticalAlign="middle"
					maxDisplayedLines="1"/>

				<!-- layer 4: moveArea -->
				<!--- @copy spark.components.TitleWindow#moveArea -->
				<s:Group id="moveArea"
					bottom="0"
					left="0"
					right="0"
					top="0"/>

				<!--- @copy spark.components.TitleWindow#closeButton -->
				<s:Button id="closeButton"
					height="27"
					width="27"
					right="0"
					skinClass="elements.skins.MoonshineTitleWindowCloseButtonSkin"/>
			</s:Group>

			<!--
				 Note: setting the minimum size to 0 here so that changes to the host component's
				 size will not be thwarted by this skin part's minimum size.   This is a compromise,
				 more about it here: http://bugs.adobe.com/jira/browse/SDK-21143
			-->
			<!--- @copy spark.components.SkinnableContainer#contentGroup -->
			<s:Group id="contentGroup"
				height="100%"
				minHeight="0"
				minWidth="0"
				width="100%">
			</s:Group>

			<!--- @private -->
			<s:Group id="bottomGroup"
				includeIn="withControls"
				minHeight="0"
				minWidth="0"
				bottom="0">

				<s:Group bottom="0"
					left="0"
					right="0"
					top="0"
					mask="{bottomGroupMask}">

					<!-- layer 0: control bar divider line -->
					<s:Rect height="1"
						left="0"
						right="0"
						top="0">
						<s:fill>
							<s:SolidColor color="0x303030"/>
						</s:fill>
					</s:Rect>
					
					<!-- layer 1: control bar highlight -->
					<s:Rect bottom="0"
						left="0"
						right="0"
						top="0">
						<s:fill>
							<s:SolidColor color="0x444444"/>
						</s:fill>
					</s:Rect>
					
					<s:filters>
						<s:DropShadowFilter
							alpha=".5" angle="90" blurX="0" blurY="7" strength="1" distance="1" inner="true"/>
					</s:filters>
				</s:Group>

				<!--- @copy spark.components.Panel#controlBarGroup -->
				<s:Group id="controlBarGroup"
					minHeight="41"
					minWidth="0"
					bottom="0"
					left="0"
					right="0"
					top="0">
					<s:layout>
						<s:HorizontalLayout paddingBottom="7"
							paddingLeft="10"
							paddingRight="10"
							paddingTop="7"
							gap="10" verticalAlign="middle" horizontalAlign="right"/>
					</s:layout>
				</s:Group>
			</s:Group>
		</s:Group>

		<skins:ResizeHandleLines id="resizeHandle"
			enabled="{resizeManager.enabled}"
			bottom="1"
			right="1"
			visible="{resizeManager.enabled}"/>
	</s:BorderContainer>
</s:SparkSkin>