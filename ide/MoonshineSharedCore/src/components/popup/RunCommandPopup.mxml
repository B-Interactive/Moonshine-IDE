<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 Prominic.NET, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// Author: Prominic.NET, Inc.
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
////////////////////////////////////////////////////////////////////////////////
-->
<resizableTitleWindow:ResizableTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   backgroundColor="0xf5f5f5"
				   width="350" minWidth="150" autoLayout="true"
				   xmlns:view="actionScripts.plugin.findreplace.view.*" xmlns:resizableTitleWindow="actionScripts.ui.resizableTitleWindow.*"
				   skinClass="components.skins.ResizableTitleWindowSkin" title="Run Custom Command"
				   creationComplete="onCreationCompletes(event)">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;
			
			import actionScripts.interfaces.ICustomCommandRunProvider;
			import actionScripts.plugin.build.vo.BuildActionVO;
			
			[Bindable] private var _commands:ArrayCollection;
			public function set commands(value:Array):void
			{
				if (value)
				{
					_commands = new ArrayCollection(value);
				}
			}
			
			[Bindable] public var executableNameToDisplay:String;
			[Bindable] public var selectedCommand:BuildActionVO;
			
			public var origin:ICustomCommandRunProvider;
			
			protected function onCreationCompletes(event:FlexEvent):void
			{
				if (selectedCommand)
				{
					cmbCommands.selectedItem = selectedCommand;
				}
			}
			
			protected function onRunButton(event:MouseEvent):void
			{
				if (origin)
				{
					origin.runOrUpdate(selectedCommand);
				}
				
				super.closeThis();
			}
			
			private function onCommandChange(event:IndexChangeEvent):void
			{
				// in case user create a new command
				if (cmbCommands.selectedItem is String)
				{
					selectedCommand = new BuildActionVO("Custom Command", cmbCommands.textInput.text);
					_commands.addItem(selectedCommand);
					cmbCommands.callLater(function():void
					{
						cmbCommands.selectedItem = selectedCommand;
					});
					
				}
				else
				{
					selectedCommand = cmbCommands.selectedItem;
				}
			}
			
			protected function cmbCommands_keyUpHandler(event:KeyboardEvent):void
			{
				if (event.keyCode == Keyboard.TAB || event.keyCode == Keyboard.ENTER)
				{
					onCommandChange(null);
				}
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
	</fx:Declarations>
	
	<s:VGroup width="100%" height="100%" paddingLeft="12" paddingBottom="10" paddingTop="9" paddingRight="13"
			  verticalAlign="middle">
		<s:HGroup width="100%"
				  verticalAlign="middle">
			<s:Label id="lblExecutableName" 
					 text="{executableNameToDisplay}"
					 fontStyle="italic" fontWeight="bold"/>
			<s:ComboBox id="cmbCommands" 
						width="100%"
						dataProvider="{_commands}" labelField="action"
						styleName="multiLineList"
						focusEnabled="false" height="26"
						change="onCommandChange(event)" tabEnabled="true" keyUp="cmbCommands_keyUpHandler(event)"
						creationComplete="cmbCommands.textInput.editable=true; cmbCommands.textInput.styleName='textInput'; cmbCommands.textInput.setFocus()"/>
		</s:HGroup>
		<!--<s:HGroup width="100%"
				  verticalAlign="middle">
			<s:Spacer width="{lblExecutableName.width}"/>
			<view:PromptTextInput id="txtName"
								  width="100%" text="{selectedCommand.actionName}"
								  styleName="textInput" prompt="Action Name"/>
		</s:HGroup>-->
	</s:VGroup>
	
	<resizableTitleWindow:controlBarContent>
		<s:Button label="Run"
				  styleName="darkButton"
				  click="onRunButton(event)"/>
	</resizableTitleWindow:controlBarContent>
</resizableTitleWindow:ResizableTitleWindow>