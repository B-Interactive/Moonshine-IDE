<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 2016-present Prominic.NET, Inc.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<newfile:NewFileBase xmlns:fx="http://ns.adobe.com/mxml/2009"
					 xmlns:s="library://ns.adobe.com/flex/spark"
					 xmlns:view="actionScripts.plugin.findreplace.view.*" xmlns:utils="actionScripts.utils.*"
					 xmlns:newfile="components.popup.newFile.*" defaultButton="{btnCreate}" preinitialize="onPreinitialize(event)">
	<fx:Metadata>
		[Event(name="EVENT_NEW_FILE", type="actionScripts.events.NewFileEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import actionScripts.factory.FileLocation;
	
			import elements.skins.DarkButtonSkin;
	
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
	
			import spark.events.TextOperationEvent;
	
			import actionScripts.events.GlobalEventDispatcher;
			import actionScripts.events.NewFileEvent;
			import actionScripts.extResources.com.validator.ValidatorType;
			import actionScripts.ui.menu.MenuPlugin;
			import actionScripts.utils.SimpleValidator;
			import actionScripts.utils.UtilsCore;
			import actionScripts.valueObjects.AS3ClassAttributes;
			import actionScripts.valueObjects.ConstantsCoreVO;
			import actionScripts.valueObjects.FileWrapper;
	
			[Bindable]
			public var isInterfaceDialog:Boolean;
			[Bindable]
			public var hasInternalClasses:Boolean = true;
	
			[Bindable]
			protected var newAsFileCompletionManager:NewASFileCompletionManager;
			
			protected function onPreinitialize(event:FlexEvent):void
			{
				createdFileExtension = ".as";
			}
	
			override protected function onBrowseButton(event:MouseEvent):void
			{
				super.onBrowseButton(event);
	
				if(!projectSelectionWindow)
				{
					projectSelectionWindow.wrapperProject = UtilsCore.getProjectFromProjectFolder(tree.selectedItem as FileWrapper);
					PopUpManager.centerPopUp(projectSelectionWindow);
				}
			}
	
			override protected function onProjectSelectionChanged(event:NewFileEvent):void
			{
				super.onProjectSelectionChanged(event);
	
				txtDestination.text = wrapperBelongToProject.projectName;
	
				var timeoutValue:uint = setTimeout(function ():void
				{
					parseFolders();
					clearTimeout(timeoutValue);
				}, 100);
			}
	
			protected function onBtnCreateClick(event:MouseEvent):void
			{
				// validation check for Enter key
				if(!isSubmitButtonEnabled) return;
	
				// validation 2
				var validateArr:Array = new Array(new ValidatorType(sValidator, txtDestination, "Source Package"));
				if(SimpleValidator.validate(validateArr))
				{
					var attributes:AS3ClassAttributes = new AS3ClassAttributes();
					attributes.modifierA = String(rgModifiersA.selectedValue);
					attributes.extendsClassInterface = txtSuperclass.text;
					attributes.implementsInterface = txtInterfaces.text;
					attributes.modifierB = cbDynamic.selected ? "dynamic" : "";
					attributes.modifierC = cbFinal.selected ? "final" : "";
	
					attributes.imports = newAsFileCompletionManager.classesImports.concat(newAsFileCompletionManager.interfacesImports);
	
					var tmpEvent:NewFileEvent = new NewFileEvent(NewFileEvent.EVENT_NEW_FILE, null, isInterfaceDialog ? ConstantsCoreVO.TEMPLATE_AS3INTERFACE : ConstantsCoreVO.TEMPLATE_AS3CLASS, wrapperOfFolderLocation, attributes);
					tmpEvent.fileName = nestedFoldersRequested ? nestedFoldersRequested.join("/") : modifiedName;
					tmpEvent.ofProject = wrapperBelongToProject;
					tmpEvent.fileExtension = this.createdFileExtension;
	
					dispatchEvent(tmpEvent);
	
					doBeforeExit();
					super.closeThis();
				}
			}
	
			protected function parseFolders():void
			{
				tree.expandItem(wrapperBelongToProject.projectFolder, true);
	
				// 1. expand all items to our fileWrapper object
				// 2. select the fileWrapper object
				// 3. scroll to the fileWrapper object
				UtilsCore.wrappersFoundThroughFindingAWrapper = new Vector.<FileWrapper>();
				UtilsCore.findFileWrapperInDepth(wrapperOfFolderLocation, wrapperOfFolderLocation.nativePath, wrapperBelongToProject);
				tree.callLater(function ():void
				{
					var wrappers:Vector.<FileWrapper> = UtilsCore.wrappersFoundThroughFindingAWrapper;
					for (var j:int = 0; j < (wrappers.length - 1); j++)
					{
						tree.expandItem(wrappers[j], true);
					}
	
					// selection
					tree.selectedItem = wrapperOfFolderLocation;
					// scroll-to
					tree.callLater(function ():void
					{
						tree.scrollToIndex(tree.getItemIndex(wrapperOfFolderLocation));
					});
				});
			}
	
			override protected function onNameChanged(event:TextOperationEvent):void
			{
				super.onNameChanged(event);
			}
	
			protected function onTreeItemClicked(event:ListEvent):void
			{
				txtDestination.text = UtilsCore.getPathStringByProjectPath(
						Vector.<FileLocation>([new FileLocation(tree.selectedItem.projectReference.path)]),
						tree.selectedItem.nativePath);
	
				// re-validate upon folder location change
				wrapperOfFolderLocation = tree.selectedItem as FileWrapper;
				isDestinationValid = UtilsCore.validatePathAgainstSources(wrapperBelongToProject, wrapperOfFolderLocation);
				txtFileName.dispatchEvent(new TextOperationEvent(TextOperationEvent.CHANGE));
			}
	
			override protected function onNewFileCreationComplete(event:FlexEvent):void
			{
				super.onNewFileCreationComplete(event);
	
				minHeight = height;
				title = isInterfaceDialog ? "New Interface Class" : "New ActionScript Class";
	
				if (wrapperBelongToProject)
				{
					txtDestination.text = UtilsCore.getPathStringByProjectPath(
							Vector.<FileLocation>([new FileLocation(wrapperBelongToProject.folderPath)]),
							wrapperOfFolderLocation.nativePath);
					txtFileName.setFocus();
				}
	
				// check if the file creation requested in the
				// 'source folder' or classpaths exists
				isDestinationValid = UtilsCore.validatePathAgainstSources(wrapperBelongToProject, wrapperOfFolderLocation);
	
				tree.callLater(parseFolders);
				GlobalEventDispatcher.getInstance().dispatchEvent(new Event(MenuPlugin.CHANGE_MENU_MAC_DISABLE_STATE));
	
				newAsFileCompletionManager = new NewASFileCompletionManager(this, wrapperBelongToProject);
				newAsFileCompletionManager.addEventListener("itemSelected", onCompletionManagerItemSelected);
	
				this.btnCreate.setStyle("skinClass", DarkButtonSkin);
			}
	
			override protected function closeThis():void
			{
				newAsFileCompletionManager.removeEventListener("itemSelected", onCompletionManagerItemSelected);
				super.closeThis();
			}
	
			override protected function closeByCrossSign(event:Event):void
			{
				newAsFileCompletionManager.removeEventListener("itemSelected", onCompletionManagerItemSelected);
				super.closeByCrossSign(event);
			}
	
			private function onTxtSuperClassChange(event:TextOperationEvent):void
			{
				var completionListPosition:Point = this.txtSuperclass.localToGlobal(
						new Point(this.txtSuperclass.x, this.txtSuperclass.y));
	
				if(isInterfaceDialog)
				{
					newAsFileCompletionManager.showCompletionListInterfaces(this.txtSuperclass.text, completionListPosition);
				} else
				{
					newAsFileCompletionManager.showCompletionListClasses(this.txtSuperclass.text, completionListPosition);
				}
			}
	
			private function onTxtInterfaceChange(event:TextOperationEvent):void
			{
				var completionListPosition:Point = this.txtInterfaces.localToGlobal(
						new Point(this.txtInterfaces.x, this.txtInterfaces.y));
				newAsFileCompletionManager.showCompletionListInterfaces(this.txtInterfaces.text, completionListPosition);
			}
	
			private function onCompletionManagerItemSelected(event:Event):void
			{
				txtSuperclass.selectRange(txtSuperclass.text.length, txtSuperclass.text.length);
				txtInterfaces.selectRange(txtInterfaces.text.length, txtInterfaces.text.length);
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:RadioButtonGroup id="rgModifiersA"/>
	</fx:Declarations>

	<s:VGroup width="100%" height="100%">
		<s:Label text="Source Folder:"/>
		<s:HGroup width="100%" verticalAlign="middle">
			<view:PromptTextInput id="txtDestination"
								  prompt="Select Destination" editable="false" width="100%" styleName="textInput"/>
			<s:Button label="Change"
					  styleName="lightButtonTight" width="70"
					  click="onBrowseButton(event)"
					  enabled="{model.projects.length > 1}"/>
		</s:HGroup>
		<utils:CustomTreeFolders id="tree"
								 width="100%" height="100%"
								 dataProvider="{wrapperBelongToProject.projectFolder}"
								 color="0xEEEEEE"
								 contentBackgroundColor="0x0"
								 rollOverColor="0x393939"
								 selectionColor="0xc165b8"
								 alternatingItemColors="[0x444444, 0x4d4c4c]"
								 verticalScrollBarStyleName="black"
								 borderVisible="false"
								 rowHeight="18"
								 useRollOver="true"
								 doubleClickEnabled="true"
								 labelField="name"
								 itemRenderer="actionScripts.ui.renderers.GenericTreeItemRenderer"
								 itemClick="onTreeItemClicked(event)"/>
	</s:VGroup>
	<s:VGroup width="100%">
		<s:Label text="Name:"/>
		<s:Group width="100%">
			<view:PromptTextInput id="txtFileName"
								  prompt="Name" width="100%" styleName="textInput" restrict="0-9A-Za-z_/"
								  change="onNameChanged(event)" enter="onBtnCreateClick(null)" marginRight="50"/>
			<s:Label text="{createdFileExtension}" styleName="textInputLabel" textAlign="right"
					 right="6" verticalCenter="0"/>
		</s:Group>
		<s:Label text="Modifiers:" visible="{hasInternalClasses}" includeInLayout="{hasInternalClasses}"/>
		<s:TileGroup width="220" columnWidth="100" visible="{hasInternalClasses}" includeInLayout="{hasInternalClasses}">
			<s:RadioButton id="radio1"
						   group="{rgModifiersA}"
						   label="public" value="public" selected="true"/>
			<s:RadioButton id="radio2"
						   group="{rgModifiersA}"
						   label="internal" value="internal"/>
			<s:CheckBox id="cbDynamic"
						label="dynamic"
						includeInLayout="{!isInterfaceDialog}" visible="{!isInterfaceDialog}"/>
			<s:CheckBox id="cbFinal"
						label="final"
						includeInLayout="{!isInterfaceDialog}" visible="{!isInterfaceDialog}"/>
		</s:TileGroup>
	</s:VGroup>
	<s:VGroup width="100%" visible="{!isInterfaceDialog}" includeInLayout="{!isInterfaceDialog}">
		<s:Label text="Superclass:"/>
		<view:PromptTextInput id="txtSuperclass"
							  prompt="Class to extend with"
							  width="100%" styleName="textInput" change="onTxtSuperClassChange(event)"
							  text="{newAsFileCompletionManager.superClassName}"/>
	</s:VGroup>
	<s:VGroup width="100%">
		<s:Label text="Interfaces:"/>
		<view:PromptTextInput id="txtInterfaces"
							  prompt="Interface to extend with" width="100%" styleName="textInput"
							  change="onTxtInterfaceChange(event)" text="{newAsFileCompletionManager.interfaceName}"/>
		<s:HGroup id="hgExistingWarning"
				  width="100%" verticalAlign="middle"
				  includeInLayout="{!isDestinationValid || (!isSubmitButtonEnabled &amp;&amp; modifiedName != '')}"
				  visible="{!isDestinationValid || (!isSubmitButtonEnabled &amp;&amp; modifiedName != '')}">
			<s:Image source="@Embed('/elements/images/iconExclamationRed.png')"/>
			<s:Label text="{warningMessage}" width="100%"/>
		</s:HGroup>
	</s:VGroup>

	<newfile:controlBarContent>
		<s:Button id="btnCreate" label="Create"
				  styleName="darkButton"
				  click="onBtnCreateClick(event)"
				  enabled="{isSubmitButtonEnabled}"/>
	</newfile:controlBarContent>
</newfile:NewFileBase>