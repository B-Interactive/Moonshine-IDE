<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 Prominic.NET, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// Author: Prominic.NET, Inc.
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
////////////////////////////////////////////////////////////////////////////////
-->
<resizableTitleWindow:ResizableTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   backgroundColor="0xf5f5f5"
				   width="400" minWidth="250" minHeight="150" autoLayout="true"
				   xmlns:view="actionScripts.plugin.findreplace.view.*" xmlns:resizableTitleWindow="actionScripts.ui.resizableTitleWindow.*"
				   skinClass="components.skins.ResizableTitleWindowSkin" creationComplete="onCreationCompletes(event)">
	<fx:Script>
		<![CDATA[
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;
			
			import actionScripts.events.GeneralEvent;
			import actionScripts.events.WorkerEvent;
			import actionScripts.locator.IDEModel;
			import actionScripts.locator.IDEWorker;
			import actionScripts.plugin.search.SearchPlugin;
			import actionScripts.ui.editor.BasicTextEditor;
			
			import elements.skins.IDEProgressBarSkin;
			
			[Bindable] public var replaceValue:String;
			[Bindable] public var matchCount:int;
			[Bindable] public var filesCount:int;
			
			public var isMatchCase:Boolean;
			public var isRegexp:Boolean;
			public var isEscapeChars:Boolean;
			public var replaceWithValue:String;
			public var isStartReplaceImmediately:Boolean;
			
			[Bindable] private var matchCountProcessed:int;
			
			private var worker:IDEWorker = IDEWorker.getInstance();
			private var model:IDEModel = IDEModel.getInstance();
			private var isWorking:Boolean;
			private var isReplaceApplied:Boolean;
			
			protected function onCreationCompletes(event:FlexEvent):void
			{
				if (isStartReplaceImmediately && replaceWithValue)
				{
					txtReplaceWith.text = replaceWithValue;
					onChangeButton(null);
				}
			}
			
			protected function onChangeButton(event:MouseEvent):void
			{
				// probable termination
				if (currentState == "progress")
				{
					closeThis();
					return;
				}
				
				// validation check for Enter key
				if (StringUtil.trim(txtReplaceWith.text).length == 0) return;
				
				replaceWithValue = txtReplaceWith.text;
				btnReplace.enabled = false;
				currentState = "progress";
				pbProgress.setProgress(0, filesCount);
				pbProgress.label = "Replaced (%)";
				isWorking = true;
				
				worker.addEventListener(IDEWorker.WORKER_VALUE_INCOMING, onWorkerValueIncoming, false, 0, true);
				worker.sendToWorker(WorkerEvent.REPLACE_FILE_WITH_VALUE, getReplaceObject());
			}
			
			private function getReplaceObject():Object
			{
				return {valueToSearch:replaceValue, valueToReplace:replaceWithValue, isMatchCase:isMatchCase, isRegexp:isRegexp, isEscapeChars:isEscapeChars};
			}
			
			override protected function closeByCrossSign(event:Event):void
			{
				if (isWorking) return;
				
				SearchPlugin.isReplaceActive = isReplaceApplied;
				worker.removeEventListener(IDEWorker.WORKER_VALUE_INCOMING, onWorkerValueIncoming);
				super.closeByCrossSign(event);
			}
			
			private function onWorkerValueIncoming(event:GeneralEvent):void
			{
				switch (event.value.event)
				{
					case WorkerEvent.FILE_PROCESSED_COUNT:
						pbProgress.setProgress(++matchCountProcessed, filesCount);
						updateOpenEditor(event.value.value);
						break;
					case WorkerEvent.PROCESS_ENDS:
						btnPreview.enabled = false;
						btnReplace.label = "Finish";
						btnReplace.enabled = true;
						isWorking = false;
						isReplaceApplied = true;
						break;
				}
			}
			
			private function updateOpenEditor(value:String):void
			{
				for each (var item:Object in model.editors)
				{
					if (item is BasicTextEditor && BasicTextEditor(item).currentFile.fileBridge.nativePath == value)
					{
						var editor:BasicTextEditor = item as BasicTextEditor;
						var lastScrolledLineIndex:int = editor.editor.model.itemRenderersInUse[0].dataIndex;
						editor.reload();
						editor.callLater(editor.scrollTo, [lastScrolledLineIndex]);
						break;
					}
				}
			}
			
			private function openPreview():void
			{
				// validation check for Enter key
				if (StringUtil.trim(txtReplaceWith.text).length == 0) return;
				
				var tmpPopup:SearchInProjectPreviewPopup = PopUpManager.createPopUp(FlexGlobals.topLevelApplication as DisplayObject, SearchInProjectPreviewPopup, true) as SearchInProjectPreviewPopup;
				tmpPopup.replaceValue = replaceValue;
				tmpPopup.replaceWithValue = txtReplaceWith.text;
				tmpPopup.matchCount = matchCount;
				tmpPopup.filesCount = filesCount;
				tmpPopup.isMatchCase = isMatchCase;
				tmpPopup.isRegexp = isRegexp;
				tmpPopup.isEscapeChars = isEscapeChars;
				tmpPopup.width = screen.width * .6;
				tmpPopup.height = screen.height * .8;
				PopUpManager.centerPopUp(tmpPopup);
				closeThis();
			}
			
			
		]]>
	</fx:Script>
	
	<resizableTitleWindow:states>
		<s:State name="default"/>
		<s:State name="progress"/>
	</resizableTitleWindow:states>
	
	<s:VGroup width="100%" height="100%" paddingLeft="12" paddingBottom="11" paddingTop="9" paddingRight="13">
		<s:Label text="{'Replacing '+ matchCount +' matches in '+ filesCount +' file(s):'}"/>
		<view:PromptTextInput id="txtReplace"
							  width="100%" styleName="textInput" enabled="false" text="{replaceValue}" excludeFrom="progress"/>
		<view:PromptTextInput id="txtReplaceWith"
							  prompt="With" width="100%" styleName="textInput"
							  enter="onChangeButton(null)" creationComplete="txtReplaceWith.setFocus()" excludeFrom="progress"/>
		<s:Label text="File(s) processed: {matchCountProcessed}"
				 fontWeight="bold" paddingTop="10" includeIn="progress"/>
		<mx:ProgressBar id="pbProgress"
						width="100%" fontSize="11" mode="manual" labelPlacement="right" labelWidth="0"
						includeIn="progress" barSkin="elements.skins.IDEProgressBarSkin"/>
		<s:Spacer height="7" includeIn="progress"/>
	</s:VGroup>
	
	<resizableTitleWindow:controlBarContent>
		<s:Spacer width="100%"/>
		<s:Button id="btnPreview" 
				  label="Preview"
				  styleName="darkButton"
				  click="openPreview()"/>
		<s:Button id="btnReplace" 
				  label="Replace"
				  styleName="darkButton"
				  click="onChangeButton(event)"/>
	</resizableTitleWindow:controlBarContent>
</resizableTitleWindow:ResizableTitleWindow>