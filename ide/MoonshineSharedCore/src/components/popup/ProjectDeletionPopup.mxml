<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
// Copyright 2016 Prominic.NET, Inc.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0 
// 
// Unless required by applicable law or agreed to in writing, software 
// distributed under the License is distributed on an "AS IS" BASIS, 
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and 
// limitations under the License
// 
// Author: Prominic.NET, Inc.
// No warranty of merchantability or fitness of any kind. 
// Use this software at your own risk.
////////////////////////////////////////////////////////////////////////////////
-->
<resizableTitleWindow:ResizableTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
										   xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/mx"
										   xmlns:view="actionScripts.plugin.findreplace.view.*"
										   xmlns:utils="actionScripts.utils.*" xmlns:resizableTitleWindow="actionScripts.ui.resizableTitleWindow.*"
										   backgroundColor="0xf5f5f5" width="400" minWidth="400" minHeight="300" height="300" title="Delete a Project"
										   creationComplete="onCreationCompletes(event)" skinClass="components.skins.ResizableTitleWindowSkin">
	<fx:Metadata>
		[Event(name="deleteFileEvent", type="actionScripts.events.DeleteFileEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
		import actionScripts.factory.FileLocation;

		import flash.utils.clearTimeout;
			import flash.utils.setTimeout;
			
			import mx.events.FlexEvent;
			
			import actionScripts.events.DeleteFileEvent;
			import actionScripts.events.GlobalEventDispatcher;
			import actionScripts.factory.FileLocation;
			import actionScripts.locator.IDEModel;
			import actionScripts.plugin.actionscript.as3project.vo.AS3ProjectVO;
			import actionScripts.plugin.java.javaproject.vo.JavaProjectVO;
			import actionScripts.ui.menu.MenuPlugin;
			import actionScripts.utils.UtilsCore;
			import actionScripts.valueObjects.FileWrapper;
			import actionScripts.valueObjects.ProjectVO;
			import actionScripts.plugin.groovy.grailsproject.vo.GrailsProjectVO;
			
			[Bindable] public var wrapperBelongToProject:FileWrapper;
			
			[Bindable] private var filesBelongsToProject:FileWrapper;
			[Bindable] private var model:IDEModel = IDEModel.getInstance();
	
			private var project:ProjectVO;
	
			override protected function closeByCrossSign(event:Event):void
			{
				doBeforeExit();
				super.closeByCrossSign(event);
			}
	
			override protected function onResizeKeyDownEvent(event:KeyboardEvent):void
			{
				doBeforeExit();
				super.onResizeKeyDownEvent(event);
			}
	
			protected function doBeforeExit():void
			{
				GlobalEventDispatcher.getInstance().dispatchEvent(new Event(MenuPlugin.CHANGE_MENU_MAC_ENABLE_STATE));
			}
	
			protected function onDeleteButton(event:MouseEvent):void
			{
				closeByCrossSign(event);
				dispatchEvent(new DeleteFileEvent(null, [filesBelongsToProject]));
			}
	
			protected function onCreationCompletes(event:FlexEvent):void
			{
				GlobalEventDispatcher.getInstance().dispatchEvent(new Event(MenuPlugin.CHANGE_MENU_MAC_DISABLE_STATE));
				var timeoutId:uint = setTimeout(function():void
				{
					parseFolders();
					clearTimeout(timeoutId);
				}, 300);
			}
	
			protected function parseFolders():void
			{
				project = UtilsCore.getProjectFromProjectFolder(wrapperBelongToProject);
				
				// generate collection with files/folders those only
				// permitted to delete while project deletion call
				filesBelongsToProject = new FileWrapper(project.folderLocation, true, project.projectFolder.projectReference, false);
				filesBelongsToProject.children = [];
				
				var acceptableLocation:FileLocation;
				var tmpPathsAdded:Dictionary = new Dictionary();
				var filesList:Array = [, project.folderLocation.fileBridge.resolvePath(".git"),
					project.projectFile]; // either FileLocation or Vector.<FileLocation>
				
				if (project is AS3ProjectVO)
				{
					var as3Project:AS3ProjectVO = AS3ProjectVO(project);
					filesList.unshift(as3Project.swfOutput.path, new FileLocation(as3Project.urlToLaunch), new FileLocation(as3Project.buildOptions.antBuildPath),
						as3Project.folderLocation.fileBridge.resolvePath("bin"), as3Project.folderLocation.fileBridge.resolvePath("bin-debug"), as3Project.folderLocation.fileBridge.resolvePath("html-template"),
						as3Project.folderLocation.fileBridge.resolvePath("build"), as3Project.libraries, as3Project.includeLibraries, as3Project.externalLibraries, as3Project.nativeExtensions, 
						as3Project.runtimeSharedLibraries, as3Project.hiddenPaths, as3Project.resourcePaths, 
						as3Project.classpaths, as3Project.config.file);
					if (as3Project.isVisualEditorProject) filesList.unshift(project.folderLocation.fileBridge.resolvePath("src"));
				}
				else if (project is JavaProjectVO)
				{
					filesList.unshift(project.folderLocation.fileBridge.resolvePath("src"), project.folderLocation.fileBridge.resolvePath("bin"), 
						project.folderLocation.fileBridge.resolvePath("pom.xml"), project.folderLocation.fileBridge.resolvePath("build.gradle"), 
						project.folderLocation.fileBridge.resolvePath(".gradle"), project.folderLocation.fileBridge.resolvePath(".settings"),
						project.folderLocation.fileBridge.resolvePath(".classpath"), project.folderLocation.fileBridge.resolvePath(".project"),
						project.folderLocation.fileBridge.resolvePath(project.name +".javaproj"), 
						project.folderLocation.fileBridge.resolvePath("target"), project.folderLocation.fileBridge.resolvePath("build"));
					filesList.concat(project.projectFolder.projectReference.hiddenPaths);
				}
				else if(project is GrailsProjectVO)
				{
					var grailsProject:GrailsProjectVO = GrailsProjectVO(project);
					filesList.unshift(grailsProject.classpaths);
				}
				
				for (var i:int; i < filesList.length; i++)
				{
					if (filesList[i] is FileLocation) checkFileLists(null, filesList[i]);
					else checkFileLists(filesList[i]);
				}
				
				tree.callLater(function():void
				{
					lblWorking.includeInLayout = lblWorking.visible = false;
					btnDelete.enabled = true;
					tree.expandItem(filesBelongsToProject, true);
					
					focusManager.showFocusIndicator = true;
					focusManager.setFocus(btnCancel);
					focusManager.showFocus();
				});
				
				/*
				 * @local
				 */
				function checkFileLists(list:Vector.<FileLocation>=null, singleFile:FileLocation=null):void
				{
					if (list)
					{
						for each (var file:FileLocation in list)
						{
							checkByFile(file);
						}
					}
					else if (singleFile)
					{
						checkByFile(singleFile);
					}

					function checkByFile(file:FileLocation):void
					{
						// make sure not to add same location multiple times
						if ((acceptableLocation = isProjectRelativePath(file)) && (tmpPathsAdded[acceptableLocation.fileBridge.nativePath] == undefined) && !checkIfRedundantRelativePath(acceptableLocation))
						{
							filesBelongsToProject.children.push(new FileWrapper(acceptableLocation, false, project.projectFolder.projectReference));
							tmpPathsAdded[acceptableLocation.fileBridge.nativePath] = true;
						}
					}
					
					function checkIfRedundantRelativePath(file:FileLocation):Boolean
					{
						// this is particularly useful in case of Visual Editor type of project
						for each (var wrapper:FileWrapper in filesBelongsToProject.children)
						{
							if (file.fileBridge.nativePath.indexOf(wrapper.file.fileBridge.nativePath + file.fileBridge.separator) != -1) return true;
						}
						
						return false;
					}
				}
			}
			
			private function isProjectRelativePath(value:FileLocation):FileLocation
			{
				// probable termination
				if (!value || !value.fileBridge.exists) return null;
				
				// sometime we want to get a file's parent directory
				// and sometime not specially like a file .as3proj 
				if (!value.fileBridge.isDirectory) 
				{
					if (value.fileBridge.parent.fileBridge.nativePath != project.folderLocation.fileBridge.nativePath)
							value = value.fileBridge.parent;
				}
				
				// in two condition we don't add items to the list
				// 1. item is located off-project-path
				// 2. item is located inside project's source folder - because project source
				// will be added as individual item
				if (project is AS3ProjectVO)
				{
					var as3Project:AS3ProjectVO = AS3ProjectVO(project);
					if (value.fileBridge.nativePath.indexOf(project.folderLocation.fileBridge.nativePath + project.folderLocation.fileBridge.separator) != -1 &&
						value.fileBridge.nativePath.indexOf(as3Project.sourceFolder.fileBridge.nativePath + project.folderLocation.fileBridge.separator) == -1)
							return value;
				}
				else
				{
					if (value.fileBridge.nativePath.indexOf(project.folderLocation.fileBridge.nativePath + project.folderLocation.fileBridge.separator) != -1)
						return value;
				}
				
				return null;
			}
			
			private function getDirectoryName(item:Object):String
			{
				if (item.file) return item.file.fileBridge.name;
				else if (item.projectRef && item.projectRef.name) return item.projectRef.name;
				return "NO INFORMATION"; 
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:StringValidator id="sValidator" property="text"/>
	</fx:Declarations>
	
	<s:VGroup height="100%" width="100%" 
			  gap="10" paddingLeft="12" paddingBottom="9" paddingTop="9" paddingRight="13">
		<s:Label text="The following files will be deleted:"/>
		<mx:Tree id="tree"
				 width="100%" height="100%"
				 dataProvider="{filesBelongsToProject}"
				 color="0xEEEEEE"
				 contentBackgroundColor="0x0"
				 rollOverColor="0x393939"
				 selectionColor="0xc165b8"
				 alternatingItemColors="[0x444444, 0x4d4c4c]"
				 verticalScrollBarStyleName="black"
				 borderVisible="false"
				 rowHeight="18"
				 useRollOver="true"
				 doubleClickEnabled="true"
				 labelFunction="getDirectoryName"
				 itemRenderer="actionScripts.ui.renderers.GenericTreeItemRenderer"/>
	</s:VGroup>
	
	<s:Label id="lblWorking" 
			 text="Working.."
			 horizontalCenter="0" verticalCenter="0"
			 color="0x999999"/>
	
	<resizableTitleWindow:controlBarContent>
		<s:Button id="btnDelete" label="Delete"
				  styleName="darkButton" enabled="false"
				  click="onDeleteButton(event)"/>
		<s:Spacer width="100%"/>
		<s:Button id="btnCancel" 
				  label="Cancel"
				  styleName="darkButton"
				  click="closeByCrossSign(event)"/>
	</resizableTitleWindow:controlBarContent>
</resizableTitleWindow:ResizableTitleWindow>