<?xml version="1.0" encoding="utf-8"?>
<!--
////////////////////////////////////////////////////////////////////////////////
//
//  Copyright (C) 2016-present Prominic.NET, Inc.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the Server Side Public License, version 1,
//  as published by MongoDB, Inc.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
//  Server Side Public License for more details.
//
//  You should have received a copy of the Server Side Public License
//  along with this program. If not, see
//
//  http://www.mongodb.com/licensing/server-side-public-license
//
//  As a special exception, the copyright holders give permission to link the
//  code of portions of this program with the OpenSSL library under certain
//  conditions as described in each individual source file and distribute
//  linked combinations including the program with the OpenSSL library. You
//  must comply with the Server Side Public License in all respects for
//  all of the code used other than as permitted herein. If you modify file(s)
//  with this exception, you may extend this exception to your version of the
//  file(s), but you are not obligated to do so. If you do not wish to do so,
//  delete this exception statement from your version. If you delete this
//  exception statement from all source files in the program, then also delete
//  it in the license file.
//
////////////////////////////////////////////////////////////////////////////////
-->
<resizableTitleWindow:ResizableTitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   backgroundColor="0xf5f5f5"
				   width="500" minWidth="400" height="400" minHeight="400"
				   creationComplete="onCreationCompletes(event)" 
				   xmlns:view="actionScripts.plugin.findreplace.view.*" xmlns:utils="actionScripts.utils.*" xmlns:resizableTitleWindow="actionScripts.ui.resizableTitleWindow.*"
				   skinClass="components.skins.ResizableTitleWindowSkin">
	<fx:Metadata>
		[Event(name="EVENT_NEW_FILE", type="actionScripts.events.NewFileEvent")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			
			import actionScripts.events.NewFileEvent;
			import actionScripts.factory.FileLocation;
			import actionScripts.locator.IDEModel;
			import actionScripts.utils.UtilsCore;
			import actionScripts.valueObjects.ConstantsCoreVO;
			import actionScripts.valueObjects.FileWrapper;
			import actionScripts.valueObjects.ProjectVO;
			
			[Bindable] public var wrapperBelongToProject:Object;
			[Bindable] public var isInterfaceDialog:Boolean;
			
			[Bindable] public var wrapperOfFolderLocation:FileWrapper;
			public var folderLocation:FileLocation;
			
			[Bindable] private var model:IDEModel = IDEModel.getInstance();
			
			protected function onCreateButton(event:MouseEvent):void
			{
				// double check when double-clicked by tree
				if (!btnCreate.enabled) return;
				
				var tmpEvent:NewFileEvent = new NewFileEvent(NewFileEvent.EVENT_FILE_SELECTED, null, null, wrapperOfFolderLocation);
				dispatchEvent(tmpEvent);
				
				super.closeThis();
			}
			
			protected function onCreationCompletes(event:FlexEvent):void
			{
				minHeight = height;
				title = "Main source folder";
				txtDestination.text = wrapperBelongToProject.folderLocation.fileBridge.name;
				btnCreate.enabled = false;
				
				var timeoutValue:uint = setTimeout(function():void
				{
					wrapperOfFolderLocation = wrapperBelongToProject.projectFolder;
					
					// since we're not updating children list at the time of
					// project creation dialog - we need to do that now do
					// display children list
					wrapperOfFolderLocation.isRoot = wrapperOfFolderLocation.shallUpdateChildren = true;
					wrapperOfFolderLocation.updateChildren();
					
					tree.dataProvider = wrapperBelongToProject.projectFolder;
					tree.callLater(parseFolders);
					clearTimeout(timeoutValue);
				}, 1000);
			}
			
			protected function parseFolders():void
			{
				tree.expandItem(wrapperOfFolderLocation, true);
				tree.selectedItem = wrapperOfFolderLocation;
			}
			
			protected function onTreeItemClicked(event:ListEvent):void
			{
				txtDestination.text = UtilsCore.getPackageReferenceByProjectPath(
						Vector.<FileLocation>([wrapperBelongToProject.folderLocation]),
						tree.selectedItem.nativePath);
				wrapperOfFolderLocation = tree.selectedItem as FileWrapper;
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<mx:StringValidator id="sValidator" property="text"/>
		<s:RadioButtonGroup id="rgModifiersA"/>
	</fx:Declarations>
	
	<s:VGroup height="100%" width="100%" 
			  gap="10" paddingLeft="12" paddingBottom="3" paddingTop="9" paddingRight="13"
			  horizontalAlign="center">
		<s:VGroup width="100%" height="100%" id="gandu">
			<s:Label text="Source Folder:"/>
			<view:PromptTextInput id="txtDestination"
								  prompt="Select Destination" editable="false" width="100%" styleName="textInput"/>
			<utils:CustomTreeFolders id="tree"
                                     width="100%" height="100%"
                                     color="0xEEEEEE"
                                     contentBackgroundColor="0x0"
                                     rollOverColor="0x393939"
                                     selectionColor="0xc165b8"
                                     alternatingItemColors="[0x444444, 0x4d4c4c]"
                                     verticalScrollBarStyleName="black"
                                     borderVisible="false"
                                     rowHeight="18"
                                     useRollOver="true"
                                     labelField="name"
                                     itemRenderer="actionScripts.ui.renderers.GenericTreeItemRenderer"
                                     itemClick="onTreeItemClicked(event)"
                                     doubleClickEnabled="true"
                                     doubleClick="onCreateButton(null)"/>
		</s:VGroup>
		<s:HGroup id="hgExistingWarning" 
				  width="100%" verticalAlign="middle">
			<s:Image source="@Embed('/elements/images/exclamation.png')"/>
			<s:Label text="Source folder must be a sub-folder in project path" width="100%"/>
		</s:HGroup>
	</s:VGroup>
	
	<resizableTitleWindow:controlBarContent>
		<mx:Image source="{new ConstantsCoreVO.loaderIcon()}"
				  width="10" height="10"
				  visible="{tree.selectedItem == null}" includeInLayout="{tree.selectedItem == null}"/>
		<s:Spacer width="100%"/>
		<s:Button id="btnCreate" label="Select"
				  styleName="darkButton"
				  click="onCreateButton(event)"
				  enabled="{tree.selectedIndex != 0}"/>
	</resizableTitleWindow:controlBarContent>
</resizableTitleWindow:ResizableTitleWindow>