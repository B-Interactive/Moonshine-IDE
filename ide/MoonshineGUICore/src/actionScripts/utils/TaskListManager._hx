package actionScripts.utils;

import flash.sensors.Accelerometer;
import flash.desktop.NativeProcess;
import flash.desktop.NativeProcessStartupInfo;
import flash.events.Event;
import flash.events.EventDispatcher;
import flash.events.IOErrorEvent;
import flash.events.NativeProcessExitEvent;
import flash.events.ProgressEvent;
import flash.filesystem.File;
import flash.Vector;

import actionScripts.valueObjects.Settings;

class TaskListManager extends EventDispatcher {

    public static final SERVICE_LIST_PARSED:String = "SERVICE_LIST_PARSED";
		
    public var probableJavaServices:Array<String>;
    
    @:protected
    var process: NativeProcess;
    @:protected
    var executable:File;
    @:protected
    var killAfterParsingTasks:Bool;

    public function new() {

        if (Settings.os == "win") executable = new File("c:\\Windows\\System32\\cmd.exe");
		else executable = new File("/bin/bash");

        super();
        
    }

    /**
    * Initialize CyberDuck FTP for MacOS
    */
    public function searchAgainstServiceName(killTasks:Bool)
    {
        killAfterParsingTasks = killTasks;
        
        // 1. declare necessary arguments
        var npInfo : NativeProcessStartupInfo = new NativeProcessStartupInfo();
        var arg:Vector<String>;
        
        arg = new Vector<String>();
        arg.push("/c"); // Windows 
        arg.push("tasklist");
        arg.push("/FI");
        arg.push("sessionname eq console");
        arg.push("/FO");
        arg.push("CSV");
        arg.push("/NH");
        
        npInfo.arguments = arg;
        npInfo.executable = executable;
        process = new NativeProcess();
        attachListenersToProcess(process);
        process.start(npInfo);
    }

    /**
    * Kill any given number of tasks
    */
    public function killTasks(value:Array<String>)
    {
        for ( i in value )
        {
            var tmpItems:Array<String> = i.split(",");
            var j = tmpItems.indexOf( i );
            var serviceNumber:String = tmpItems[1].substring(1, tmpItems[j].length - 2);
            
            var npInfo : NativeProcessStartupInfo = new NativeProcessStartupInfo();
            var arg:Vector<String>;
            
            arg = new Vector<String>();
            arg.push("/c"); // Windows 
            arg.push("taskkill");
            arg.push("/PID");
            arg.push(serviceNumber);
            arg.push("/F");
            
            npInfo.arguments = arg;
            npInfo.executable = executable;
            var tmpProcess:NativeProcess = new NativeProcess();
            tmpProcess.start(npInfo);
        }
    }

    /**
    * Attach listeners to NativeProcess
    */
    @:protected function attachListenersToProcess(target:NativeProcess)
    {
        #if air
        target.addEventListener(NativeProcessExitEvent.EXIT, onExit);
        target.addEventListener(ProgressEvent.STANDARD_OUTPUT_DATA, onOutputData);
        target.addEventListener(ProgressEvent.STANDARD_ERROR_DATA, onErrorData);
        target.addEventListener(IOErrorEvent.STANDARD_OUTPUT_IO_ERROR, onIOError);
        target.addEventListener(IOErrorEvent.STANDARD_ERROR_IO_ERROR, onIOError);
        #end
    }
    
    /**
        * Release all the listeners from NativeProcess
        */

    @:protected function releaseListenersToProcess(event:Event)
    {
        #if air
        event.target.removeEventListener(NativeProcessExitEvent.EXIT, onExit);
        event.target.removeEventListener(ProgressEvent.STANDARD_OUTPUT_DATA, onOutputData);
        event.target.removeEventListener(ProgressEvent.STANDARD_ERROR_DATA, onErrorData);
        event.target.removeEventListener(IOErrorEvent.STANDARD_OUTPUT_IO_ERROR, onIOError);
        event.target.removeEventListener(IOErrorEvent.STANDARD_ERROR_IO_ERROR, onIOError);
        #end
        process.closeInput();
    }

    /**
    * NativeProcess outputData handler
    */
    private function onOutputData(event:ProgressEvent)
    {
        var output:String = process.standardOutput.readUTFBytes(process.standardOutput.bytesAvailable);
        var tmpArr:Array<String> = output.split("\n");
        var isMoonshineAttempted:Bool = false;
        var isFirstJavaAttempted:Bool = false;
        
        probableJavaServices = [];
        for (i in tmpArr)
        {
            // for test/debug, make it 'adl' else 'Moonshine'
            var j = tmpArr.indexOf( i );
            if (tmpArr[j].indexOf("adl") != -1) isMoonshineAttempted = true;
            else if (isMoonshineAttempted) 
            {
                if (isFirstJavaAttempted)
                {
                    // example
                    // "java.exe","7492","Console","1","46,164 K"
                    if (tmpArr[j].indexOf("java") != -1) probableJavaServices.push(tmpArr[j]);
                }
                
                // we're skipping this considering first java service AFTER Moonshine is
                // the java server for type-ahead. We don't want to stop that
                if (tmpArr[j].indexOf("java") != -1) isFirstJavaAttempted = true;
            }
        }
        
        // notify the caller
        if (!killAfterParsingTasks) dispatchEvent(new Event(SERVICE_LIST_PARSED));
        else killTasks(probableJavaServices);
    }
    
    /**
        * NativeProcess errorData handler
        */
    private function onErrorData(event:ProgressEvent)
    {
        releaseListenersToProcess(event);
        //superTrace.setConnectionLog("NativeProcess ERROR: " +process.standardError.readUTFBytes(process.standardError.bytesAvailable)); 
    }
    
    /**
        * NativeProcess exit handler
        */
    private function onExit(event:NativeProcessExitEvent)
    {
        releaseListenersToProcess(event);
        //superTrace.setConnectionLog("NativeProcess Exit: " +event.exitCode);
    }
    
    /**
        * NativeProcess ioError handler
        */
    private function onIOError(event:IOErrorEvent)
    {
        releaseListenersToProcess(event);
        //superTrace.setConnectionLog("NativeProcess IOERROR: " +event.toString());
    }

}