//TODO
package actionScripts.valueObjects;

import haxe.DynamicAccess;
import openfl.ui.Keyboard;
import haxe.ds.IntMap;
import haxe.ds.StringMap;
import StringTools;

class KeyboardShortcut {
	public var altKey:Bool;
	public var ctrlKey:Bool;
	public var cmdKey:Bool;
	public var shiftKey:Bool;
	public var keyCode:Int;

	private var _event:String;

	public var event(get, never):String;

	private static final SHIFT_KEYCODE_CHAR_MAP:DynamicAccess<Array<String>> = {
		_192 : ["`", "~"],
		_220 : ["\\", "|"],
		_188 : [",", "<"],
		_187 : ["=", "+"],
		_219 : ["[", "{"],
		_189 : ["-", "_"],
		_190 : [".", ">"],
		_222 : ["'", "\""],
		_221 : ["]", "}"],
		_191 : ["/", "?"],
		_186 : [";", ":"]
    };

	private static final STRING_KEYCODE_TEXT_CONVERSION:DynamicAccess<Array<Dynamic>> = {
		"\n":[Keyboard.ENTER, "Enter"],
		" ":[Keyboard.SPACE, "Space"]
    };

	private static var KEYCODE_STRING_TEXT_CONVERSION:DynamicAccess<Array<Dynamic>> = {};

	private static var SHIFT_CHAR_KEYCODE_MAP:DynamicAccess<Array<Dynamic>> = {};

    private static var _initialized:Bool = false;

	private static function init():Void {
        if ( _initialized ) return;

		for (keyCode in SHIFT_KEYCODE_CHAR_MAP.keys()) {

            var k:String = keyCode.split("_").join("");
            var ka = SHIFT_KEYCODE_CHAR_MAP.get( keyCode )[0];
            var kb = SHIFT_KEYCODE_CHAR_MAP.get( keyCode )[1];
            SHIFT_CHAR_KEYCODE_MAP.set( ka, SHIFT_KEYCODE_CHAR_MAP.get( keyCode ) );
            SHIFT_CHAR_KEYCODE_MAP.set( kb, SHIFT_KEYCODE_CHAR_MAP.get( keyCode ) );
            /*
            SHIFT_CHAR_KEYCODE_MAP[SHIFT_KEYCODE_CHAR_MAP[keyCode][0]] = keyCode; // Non Shift
			SHIFT_CHAR_KEYCODE_MAP[SHIFT_KEYCODE_CHAR_MAP[keyCode][1]] = keyCode; // Shift
            */
		}
		for (str in STRING_KEYCODE_TEXT_CONVERSION.keys()) {
            var sa = STRING_KEYCODE_TEXT_CONVERSION.get( str )[ 0 ];
            var sb = STRING_KEYCODE_TEXT_CONVERSION.get( str )[ 1 ];
            KEYCODE_STRING_TEXT_CONVERSION.set( sa, sb );
			//KEYCODE_STRING_TEXT_CONVERSION[STRING_KEYCODE_TEXT_CONVERSION[str][0]] = [str, STRING_KEYCODE_TEXT_CONVERSION[str][1]];
		}
        _initialized = true;
	}

	public function new(event:String, key:String, modifiers:Array<Int> = null):Void {
        init();
		_event = event;
		parse(key, ( modifiers != null ) ? modifiers : []);
	}

	public function toString():String {
		var keys:Array<String> = [];
		if (altKey)
			keys.push("Alt");
		if (ctrlKey)
			keys.push("Ctrl");
		if (shiftKey)
			keys.push("Shift");
		if (cmdKey)
			keys.push("Cmd");

		if (SHIFT_KEYCODE_CHAR_MAP.exists("_" + keyCode) ) {
			keys.push(shiftKey ? SHIFT_KEYCODE_CHAR_MAP[keyCode][1] : SHIFT_KEYCODE_CHAR_MAP[keyCode][0]);
		} else if (keyCode >= 112 && keyCode <= 123) { // function keys
			keys.push("F" + Std.string((keyCode % 112) + 1));
		} else if (keyCode > 64 && keyCode < 91) {
            var cc:Int = Std.parseInt( "0x" + StringTools.hex( keyCode, 2 ) );
			var char:String = String.fromCharCode( cc );
			keys.push(shiftKey ? char.toUpperCase() : char.toLowerCase());
		} else if (KEYCODE_STRING_TEXT_CONVERSION[keyCode]) {
			keys.push(KEYCODE_STRING_TEXT_CONVERSION[keyCode][1]); // String translation
		}

		return keys.join("+");
	}

	private function parse(key:String, modifiers:Array<Int>):Void {
		if (modifiers.indexOf(Keyboard.ALTERNATE) != -1)
			altKey = true;
		if (modifiers.indexOf(Keyboard.COMMAND) != -1)
			cmdKey = true;
		if (modifiers.indexOf(Keyboard.CONTROL) != -1)
			ctrlKey = true;
		if (modifiers.indexOf(Keyboard.SHIFT) != -1)
			shiftKey = true;

		var charCode:Int = key.charCodeAt(0);
		if (charCode > 64 && charCode < 91) // isUpperCase
			shiftKey = true;

		if (STRING_KEYCODE_TEXT_CONVERSION.exists(key)) {
			keyCode = STRING_KEYCODE_TEXT_CONVERSION.get(key)[0];
			return;
		}

		key = key.toUpperCase();
		if (Keyboard[key]) {
			keyCode = Keyboard[key];
		} else if (Keyboard["NUMBER_" + key]) {
			keyCode = Keyboard["NUMBER_" + key];
		} else if (!Math.isNaN(Std.parseInt(key))) {
			keyCode = Std.parseInt(key);
		} else if (SHIFT_CHAR_KEYCODE_MAP.exists( key )) {
			keyCode = SHIFT_CHAR_KEYCODE_MAP.get(key)[0];
            //keyCode = SHIFT_CHAR_KEYCODE_MAP[key];
		}
	}

	public function get_event():String {
		return _event;
	}
}