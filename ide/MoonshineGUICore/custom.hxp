import haxe.io.Bytes;
import hxp.*;
import lime.tools.*;
import sys.io.Process;

// Class name must match capitalized .hxp name, eg. for project.hxp the class should be named Project
class Custom extends HXProject {

    public function new () {
        
        super ();

        //
        // WARNING! Printing anything in the console stops compilation in Moonshine currently,
        // so use any console functions only for debugging / manual compilation!
        //
        // These all fail in Moonshine:
        //
        // trace( "Starting build of HXP Project..." );
        // Sys.println( "Starting build of HXP Project..." );
        //

        // Getting local path of Lime
        var lime:Haxelib = new Haxelib( "lime" );
        var limePath:String = Haxelib.getPath( lime );
        
        // App config
        app.main = "openfl.display.Sprite";
        app.file = "MoonshineGUICore";

        // Haxelibs
        haxelibs.push( new Haxelib( "openfl" ) );
        haxelibs.push( new Haxelib( "feathersui" ) );
        haxelibs.push( new Haxelib( "actuate" ) );
        haxelibs.push( new Haxelib( "amfio" ) );
        haxelibs.push( new Haxelib( "format" ) );
        haxelibs.push( new Haxelib( "markdown-openfl-textfield" ) );
        haxelibs.push( new Haxelib( "moonshine-openfl-language-client" ) );
        haxelibs.push( new Haxelib( "moonshine-openfl-debug-adapter-client" ) );
        haxelibs.push( new Haxelib( "moonshine-feathersui-text-editor" ) );

        // Source paths
        sources.push( "../../../Moonshine-SDK-Installer/MoonshineSDKInstallerGUICore/src" );
        sources.push( "../../../Moonshine-SDK-Installer/MoonshineSDKInstallerGUICore/externs" );
        sources.push( '${limePath}/externs/air' );
        sources.push( "externs" );
        sources.push( "src" );

        // Getting FLEX_HOME environment variable
        var flexhome:String = Sys.getEnv( "FLEX_HOME" );

        // Haxedefs
        haxedefs.set( "no-deprecation-warnings", 1 );
        haxedefs.set( "air", null );

        // Haxeflags
        haxeflags.push( "--macro include('moonshine', true, null, null, true)" );
        haxeflags.push( "--macro include('feathers', true, null, null, true)" );
        haxeflags.push( "--macro include('motion', true, null, null, true)" );
        haxeflags.push( "--macro include('actionScripts', true, null, null, true)" );
        haxeflags.push( "--swf-version 44" );
        haxeflags.push( '--swf-lib-extern ${flexhome}/frameworks/libs/framework.swc' );
        haxeflags.push( '--swf-lib-extern ${flexhome}/frameworks/libs/air/airglobal.swc' );
        haxeflags.push( '--swf-lib-extern ${flexhome}/frameworks/libs/air/aircore.swc' );
        haxeflags.push( '--swf-lib-extern ${flexhome}/frameworks/libs/air/airframework.swc' );

        // Template path
        templatePaths.push( "templates" );

        // Target-specific config
        if ( target == Platform.FLASH ) {

            sources.push( "build_macros/flash" );
            haxeflags.push( "--macro AddFlashPropertyMeta.find('feathers')" );
            haxeflags.push( "--macro AddFlashPropertyMeta.find('moonshine')" );
            haxeflags.push( "--macro AddFlashPropertyMeta.find('motion')" );
            haxeflags.push( "--macro AddFlashPropertyMeta.find('actionScripts')" );

        }
        
    }

}
